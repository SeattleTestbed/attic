Index: tests/ut_stagedtestcompanion_test.py
===================================================================
--- tests/ut_stagedtestcompanion_test.py	(revision 0)
+++ tests/ut_stagedtestcompanion_test.py	(working copy)
@@ -0,0 +1,3 @@
+#pragma out PASS
+
+print "PASS"
\ No newline at end of file
Index: tests/ut_stagedtestcompanion_test_setup.py
===================================================================
--- tests/ut_stagedtestcompanion_test_setup.py	(revision 0)
+++ tests/ut_stagedtestcompanion_test_setup.py	(working copy)
@@ -0,0 +1,3 @@
+#pragma out PASS
+
+print "PASS"
\ No newline at end of file
Index: tests/ut_stagedtestcompanion_test_shutdown.py
===================================================================
--- tests/ut_stagedtestcompanion_test_shutdown.py	(revision 0)
+++ tests/ut_stagedtestcompanion_test_shutdown.py	(working copy)
@@ -0,0 +1,3 @@
+#pragma out PASS
+
+print "PASS"
\ No newline at end of file
Index: tests/ut_stagedtestcompanion_test_subprocess.py
===================================================================
--- tests/ut_stagedtestcompanion_test_subprocess.py	(revision 0)
+++ tests/ut_stagedtestcompanion_test_subprocess.py	(working copy)
@@ -0,0 +1 @@
+print "Running subprocess"
Index: tests/ut_stagedtestnobase_test_setup.py
===================================================================
--- tests/ut_stagedtestnobase_test_setup.py	(revision 0)
+++ tests/ut_stagedtestnobase_test_setup.py	(working copy)
@@ -0,0 +1,3 @@
+#pragma out PASS
+
+print "PASS"
\ No newline at end of file
Index: tests/ut_stagedtestnobase_test_shutdown.py
===================================================================
--- tests/ut_stagedtestnobase_test_shutdown.py	(revision 0)
+++ tests/ut_stagedtestnobase_test_shutdown.py	(working copy)
@@ -0,0 +1,3 @@
+#pragma out PASS
+
+print "PASS"
\ No newline at end of file
Index: tests/ut_stagedtestnobase_test_subprocess.py
===================================================================
--- tests/ut_stagedtestnobase_test_subprocess.py	(revision 0)
+++ tests/ut_stagedtestnobase_test_subprocess.py	(working copy)
@@ -0,0 +1,3 @@
+#pragma out PASS
+
+print "PASS"
\ No newline at end of file
Index: tests/ut_utftests_nobasetest.py
===================================================================
--- tests/ut_utftests_nobasetest.py	(revision 0)
+++ tests/ut_utftests_nobasetest.py	(working copy)
@@ -0,0 +1,25 @@
+"""
+Makes sure that setup, subprocess and shutdown scripts without a base
+test do not get skipped.  See #1384.
+"""
+
+# utf will print out the names of the tests if they get run.
+# since the modules there is no test with the name
+# ut_stagedtestnobase_test.py, they must be executed in this order.
+#pragma out Running: ut_stagedtestnobase_test_setup.py
+#pragma out Running: ut_stagedtestnobase_test_shutdown.py
+#pragma out Running: ut_stagedtestnobase_test_subprocess.py
+
+import subprocess
+import sys
+
+process = subprocess.Popen([sys.executable, 'utf.py', '-m', 'stagedtestnobase'],
+                           stderr=subprocess.PIPE,
+                           stdout=subprocess.PIPE)
+
+(out, err) = process.communicate()
+
+if out:
+  print out
+if err:
+  print err
Index: tests/ut_utftests_nobasetest_setup.py
===================================================================
--- tests/ut_utftests_nobasetest_setup.py	(revision 0)
+++ tests/ut_utftests_nobasetest_setup.py	(working copy)
@@ -0,0 +1,11 @@
+"""
+Make sure the nobasetest runs without a file with the base filename in
+the current directory.  See #1384.
+"""
+
+import os
+
+try:
+  os.remove('ut_stagedtestnobase_test.py')
+except OSError:
+  pass
Index: tests/ut_utftests_test_companion_runcount.py
===================================================================
--- tests/ut_utftests_test_companion_runcount.py	(revision 0)
+++ tests/ut_utftests_test_companion_runcount.py	(working copy)
@@ -0,0 +1,34 @@
+"""
+Make sure we only run setup/shutdown/subprocess scripts the correct
+number of times.
+
+"""
+import subprocess
+import sys
+
+process = subprocess.Popen([sys.executable, 'utf.py', '-m', 'stagedtestcompanion'],
+                           stderr=subprocess.PIPE,
+                           stdout=subprocess.PIPE)
+
+(out, err) = process.communicate()
+
+num_run_setup = 0
+num_run_subprocess = 0
+num_run_shutdown = 0
+
+for line in out.splitlines():
+  if "Running: ut_stagedtestcompanion_test_setup.py" in line:
+    num_run_setup += 1
+  if "Running: ut_stagedtestcompanion_test_subprocess.py" in line:
+    num_run_subprocess += 1
+  if "Running: ut_stagedtestcompanion_test_shutdown.py" in line:
+    num_run_shutdown += 1
+
+if num_run_setup != 1:
+  print "Ran setup script", num_run_setup, "times, when should be run 1 time!"
+
+if num_run_subprocess != 0:
+  print "Ran subprocess script", num_run_subprocess, "times, when should be run 0 times!"
+
+if num_run_shutdown != 1:
+  print "Ran shutdown script", num_run_shutdown, "times, when should be run 1 time!"
Index: utf.py
===================================================================
--- utf.py	(revision 7175)
+++ utf.py	(working copy)
@@ -394,9 +394,13 @@
   for mod_file in all_module_files:
     # If, after removing the extension, the file ends with a
     # valid script descriptor i.e. setup, shutdown, or subprocess
-    if mod_file.split('_')[-1].split('.')[0] in valid_scripts:
+    base_name, last_filename_component = mod_file.rsplit('_', 1)
+    if last_filename_component.split('.')[0] in valid_scripts:
       script_files.append(mod_file)
-      if mod_file in module_file_list:
+
+      # If there is no base test, then this is a standalone unit test.
+      base_test_script = base_name + '.py'
+      if mod_file in module_file_list and base_test_script in module_file_list:
         module_file_list.remove(mod_file)
 
 
