Index: udpcentralizedadvertise.repy
===================================================================
--- udpcentralizedadvertise.repy	(revision 6814)
+++ udpcentralizedadvertise.repy	(working copy)
@@ -19,6 +19,8 @@
 udpservername = "udpadvertiseserver.poly.edu"
 udpserverport = 10102
 
+mycontext['udpserver_iplist'] = []
+
 # how long to wait for timeouts...
 udpcentralizedservertimeouts = [1,2,4,8]
 
@@ -29,6 +31,9 @@
 # Need this for receiving over UDP. The Repy v1 API forces us to use 
 # a callback, which requires this roundabout solution.
 mycontext['advertise_response'] = []
+# This will contain any exceptions from the UDP recvmess callback, if
+# they arise...
+mycontext['advertise_errors'] = []
 
 mycontext['udprequestport'] = 0
 
@@ -90,6 +95,12 @@
     udprequestport = _getusableport()
     mycontext['udprequestport'] = udprequestport
 
+
+  # We can't assume that the DNS entries for the UDP advertise server
+  # will never change...
+  (hostname, aliaslist, ipaddresslist) = gethostbyname_ex(udpservername)
+  mycontext['udpserver_iplist'] = ipaddresslist
+
   starttime = getruntime()
 
   # Let's get ready to receive a response...
@@ -103,6 +114,8 @@
     sendmess(udpservername, udpserverport, datastringtosend, getmyip(), udprequestport)
 
     while getruntime() < starttime + timeout:
+      if mycontext['advertise_errors']:
+        raise UDPCentralAdvertiseError("Advertising failed with error(s): " + str(mycontext['advertise_errors']))
 
       for entry in mycontext['advertise_response']:
         if entry[len(entry) - 1] == queryid:
@@ -129,9 +142,17 @@
 # This is our roundabout solution for a UDP callback.
 # Could crash. Probably should if something bad happens.
 def _listenformessage(remoteIP, remoteport, message, commhandle):
-  mycontext['advertise_response'].append(serialize_deserializedata(message))
-
-  stopcomm(commhandle)
+  # Its possible that someone tried to pretend to be the advertise
+  # server... Ignore their response if that's the case.
+  if remoteIP in mycontext['udpserver_iplist']:
+    try:
+      # While unlikely, we want to prevent handling a second request
+      # from the advertise server if we're in the middle of processing
+      # this one.
+      stopcomm(commhandle)
+      mycontext['advertise_response'].append(serialize_deserializedata(message))
+    except Exception, e:
+      mycontext['advertise_errors'].append(e)
   return
 
 
