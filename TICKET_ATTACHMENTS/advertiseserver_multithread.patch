--- C:\Users\Leonard\Dropbox\Portable Apps\PortableApps\WinSCPPortable\App\winscp\scp29829\home\advertisev3\live\advertiseserver.py	Sun Nov 10 12:43:24 2013
+++ C:\Users\Leonard\Dropbox\Seattle\seattle\trunk\advertiseserver\advertiseserver.py.v3	Sun Nov 10 13:49:16 2013
@@ -19,7 +19,9 @@
 import threading
 import datetime
 import serialize
+import Queue
 import session
+import traceback
 
 # This is the dictionary which holds advertisement associations. Entries will 
 # be of the form:
@@ -58,6 +60,24 @@
 query_times = [] # Store the query times here.
 
 
+# How many connections be queued in the listening TCP socket
+# 5 is usually the maximum, though this is system dependent.
+max_queued_connections = 5
+
+# How many threads should run in parallel to receive TCP queries
+num_tcp_handler_threads = max_queued_connections
+
+# Queries that have been retrieved, and are awaiting processing.
+# Items in this queue should be handled almost instantaneously by the
+# handler thread.
+# It should contain dictionaries containing the following keys:
+# 'request':
+#    The GET/PUT request string.
+# 'callback':
+#    This function is called when processing has finished.  It will be
+#    passed the result of the request.
+# Let's cap this queue's size, so that it doesn't grow *TOO* large.
+pending_tcp_queries = Queue.Queue(maxsize=num_tcp_handler_threads * 4)
 
 
 def _purge_expired_items():
@@ -395,7 +415,20 @@
   return
 
 
-
+def _tcp_query_handler_thread():
+  global query_times
+
+  while True:
+    try:
+      query = pending_tcp_queries.get(block=True)
+      response = _handle_request(query['request'])
+
+      session.session_sendmessage(query['socket'], response)
+
+      query['socket'].close()
+      query_times.append(time.time() - query['start_time'])
+    except Exception, e:
+      _log_with_timestamp("Exception while handling request (from %s): " % str(query['socket'].getpeername()) +str(query) + "\n" +  traceback.format_exc() + '\n', 'error')
 
 
 def _udp_callback():
@@ -446,16 +479,41 @@
   sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   sock.bind((local_ip, tcp_port))
 
-  sock.listen(5)
+  sock.listen(max_queued_connections)
 
   # Slow it down a bit to prevent messing up our debugging.
   time.sleep(0.005)
 
+  # No reason to accept any more than what we can handle.
+  accepted_sockets = Queue.Queue(maxsize=num_tcp_handler_threads)
+
+  # Start multiple threads to accept connections in parallel.
+  for thread_no in xrange(num_tcp_handler_threads):
+    tcp_handler_thread = threading.Thread(
+      group=None, 
+      target=_tcp_handler, 
+      name="THREAD-TCP-HANDLER-"+str(thread_no), 
+      args=(accepted_sockets,), 
+      kwargs={})
+    tcp_handler_thread.setDaemon(True)
+    tcp_handler_thread.start()
+
   _log_with_timestamp("TCP Callback started, now listening on: " + str(local_ip) + ":" + str(tcp_port) + "\n")
 
+  # Accept any TCP connections and insert them into the accepted sockets
+  # queue.  This allows multiple threads to be able to handle these
+  # sockets in parallel, so that a single slow connection won't affect
+  # faster connections, so long as all the threads aren't being blocked
+  # by slow connections simultaneously.
+  while True:
+    connection_socket, addr = sock.accept()
+    accepted_sockets.put(connection_socket, block=True)
+
+
+def _tcp_handler(accepted_sockets):
   while True:
     try:
-      connection_socket, addr = sock.accept()
+      connection_socket = accepted_sockets.get(block=True)
 
       start = time.time()
 
@@ -463,14 +521,13 @@
 
       data = session.session_recvmessage(connection_socket)
 
-      formatted_response = _handle_request(data)
-
-
-      session.session_sendmessage(connection_socket, formatted_response)
-
-      connection_socket.close()
-
-      query_times.append(time.time() - start)
+      # Queue it up in the queue of pending queries, to be handled
+      # by the TCP request handler thread.
+      pending_tcp_queries.put({
+        'request': data,
+        'socket': connection_socket,
+        'start_time': start,
+      })
     except socket.timeout, e:
       _log_with_timestamp("[TIMEOUT ERROR] " + str(e) + "\n", output='error')
     except ValueError, e:
@@ -521,12 +578,19 @@
   maintenance_thread.start()
   sys.stdout.write("[DONE]\n")
 
+  # We only want to have TCP running...
   _log_with_timestamp("Starting UDP callback . . . . . . ")
   udp_thread = threading.Thread(group=None, target=_udp_callback, name="THREAD-UDP", args = (), kwargs = {})
   udp_thread.setDaemon(True)
   udp_thread.start()
   sys.stdout.write("[DONE]\n")
 
+  _log_with_timestamp("Starting TCP query handler . . ")
+  tcp_thread = threading.Thread(group=None, target=_tcp_query_handler_thread, name="THREAD-TCP", args = (), kwargs = {})
+  tcp_thread.setDaemon(True)
+  tcp_thread.start()
+  sys.stdout.write("[DONE]\n")
+
   _log_with_timestamp("Starting TCP callback . . . . . . ")
   tcp_thread = threading.Thread(group=None, target=_tcp_callback, name="THREAD-TCP", args = (), kwargs = {})
   tcp_thread.setDaemon(True)