Index: utf/utf.py
===================================================================
--- utf/utf.py	(revision 5150)
+++ utf/utf.py	(working copy)
@@ -18,7 +18,7 @@
 
     Required naming convention for every test file:
 
-    ut_MODULE{_DESCRIPTOR].py
+    ut_MODULE[_DESCRIPTOR].py
 
     There can be multiple descriptors associated with a module.
 
@@ -44,7 +44,10 @@
 
 <Modified>
   Modified on Nov. 16, 2010 by Monzur Muhammad to add functionality for the
-  verbose option. Now if verbose is on, it display the time taken for the test.
+  verbose option. Now if verbose is on, it displays the time taken for the test.
+  
+  Modified on Feb. 29, 2012 by Moshe Kaplan to add support for running unit tests
+  with security layers.
 """
 
 
@@ -71,9 +74,8 @@
 OUT_PRAGMA = 'out'
 
 
-# Verbose Option
-VERBOSE = False
 
+
 SHOW_TIME = False
 
 # UTF Exceptions.
@@ -107,7 +109,15 @@
   ###
   ### Define allowed arguments.
   ###
-  parser = optparse.OptionParser()
+  
+  usage = \
+  """
+    Usage: python utf.py (-f filename | -m modulename | -a)
+    -f -- test a specific filename
+    -m -- test a module of modulename
+    -a -- run all tests in current directory
+  """
+  parser = optparse.OptionParser(usage=usage)
 
   ### Generic Option Category.
   group_generic = optparse.OptionGroup(parser, "Generic")
@@ -124,7 +134,7 @@
 
   parser.add_option_group(group_generic)
 
-  ### Testing Option Category.
+  ### Testing Option Category. One of these must be specified
   group_test = optparse.OptionGroup(parser, "Testing")
   
   # Test for a specific module.
@@ -143,7 +153,18 @@
                         metavar="ALL")
 
   parser.add_option_group(group_test)
+ 
+   ### Security Layers Option Category.
+  group_security_layers = optparse.OptionGroup(parser, "Security Layers")
   
+  # Add a security layer if desired.
+  group_security_layers.add_option("-s", "--securitylayer", dest="securitylayers",
+                        default=None, action = "append",
+                        help="execute the specified tests with a security layer")
+
+  parser.add_option_group(group_security_layers)
+  
+   
   # All files in the current working directory.
   all_files = glob.glob("*")
 
@@ -156,7 +177,7 @@
   (options, args) = parser.parse_args()
 
 
-  #Count number of args for legal number of args test
+  # Count number of args for mutual exclusion
   i = 0
   if (options.module):
     i = i + 1
@@ -165,28 +186,29 @@
   if (options.file):
     i = i + 1
 
-  # Test for mutual exclusion.
-  if i > 1:
+  if i == 0:
+    parser.error("At least one option must be selected!")
+  elif i > 1:
     parser.error("Options are mutually exclusive!")
     
-
   # Check if the show_time option is on.
   if (options.show_time):
     global SHOW_TIME
     SHOW_TIME = True
 
+  # Single file.
+  if (options.file): 
 
-  if (options.file): # Single file.
-
     file_path = options.file
-
-    # I need to derive the module name...
-    if not file_path.startswith('ut_') or len(file_path.split('_'))<3:
-      print "Error, cannot determine module name from filename '"+file_path+"'"
+    
+    # Derive the module name...
+    try:
+      module_name = parse_file_name(file_path)[0]
+    except InvalidTestFileError, e:
+      print e
       return
-    else:
-      module_name = file_path.split('_')[1]
 
+    
     # the test_module code is really poorly structured.   I need to tell it to 
     # consider the shutdown, setup, and subprocess scripts...
     files_to_use = [file_path]
@@ -196,37 +218,34 @@
     files_to_use = files_to_use + filter_files(module_file_list, descriptor = 'shutdown')
     files_to_use = files_to_use + filter_files(module_file_list, descriptor = 'subprocess')
 
-    test_module(module_name, files_to_use)
+    test_module(module_name, files_to_use, options.securitylayers)
 
-  elif (options.module): # Entire module.
+  # Entire module.
+  elif (options.module): 
     
     # Retrieve the module name.
     module_name = options.module
     
     module_file_list = filter_files(valid_files, module = module_name)
-    test_module(module_name, module_file_list)
+    test_module(module_name, module_file_list, options.securitylayers)
     
-  elif (options.all): #all test files
-    test_all(valid_files)
+  # All test files
+  else: 
+    test_all(valid_files, options.securitylayers)
 
-  else: # If no options are present, print the usage
-    
-    print "Usage: python utf.py (-f filename | -m modulename | -a)"
-    print "-f -- test a specific filename"
-    print "-m -- test a module of modulename"
-    print "-a -- run all tests in current directory"
 
 
 
-
-def execute_and_check_program(file_path):
+def execute_and_check_program(file_path, securitylayers):
   """
   <Purpose>
     Given the test file path, this function will execute the program and
     monitor its behavior
     
   <Arguments>
-    Test file path.
+    file_path: Test file path.
+    securitylayers: A list of security layers to use. If no security are 
+      selected, this should have a value of None 
 
   <Exceptions>
     None.
@@ -238,12 +257,12 @@
     None
   """
   file_path = os.path.normpath(file_path)
-  testing_monitor(file_path)
+  testing_monitor(file_path, securitylayers)
 
 
 
 
-def test_module(module_name, module_file_list):
+def test_module(module_name, module_file_list, securitylayers):
   """
   <Purpose>
     Execute all test files contained within module_file_list matching the
@@ -253,6 +272,8 @@
     module_name: module name to be tested
     module_file_list: a list of files to be filtered by module name and ran through
       the testing framework
+    securitylayers: A list of security layers to use. If no security are 
+      selected, this should have a value of None 
 
   <Exceptions>
     None
@@ -310,7 +331,7 @@
 
   # Run the module tests
   for test_file in module_file_list: 
-    execute_and_check_program(test_file)
+    execute_and_check_program(test_file, securitylayers)
 
   end_time = time.time()
 
@@ -332,7 +353,7 @@
 
 
 
-def test_all(file_list):
+def test_all(file_list, securitylayers):
   """
   <Purpose>
     Given the list of valid test files, this function will test each module
@@ -340,7 +361,9 @@
     
   <Arguments> 
     file_list: List of test files to be ran
-
+    securitylayers: A list of security layers to use. If no security are 
+      selected, this should have a value of None 
+      
   <Exceptions>
     None
     
@@ -364,12 +387,12 @@
   
   # Test each module.
   for module_name, module_file_list in module_dictionary.iteritems():
-    test_module(module_name, module_file_list)
+    test_module(module_name, module_file_list, securitylayers)
 
 
 
 
-def testing_monitor(file_path):
+def testing_monitor(file_path, securitylayers):
   """
   <Purpose>
     Executes and prints the results of the unit test contained within 'file_path'
@@ -377,7 +400,9 @@
  
   <Arguments>
     file_path: File to be used within the testing_monitor
-
+    securitylayers: A list of security layers to use. If no security are 
+      selected, this should have a value of None 
+      
   <Exceptions>
     InvalidPragmaError: if there is an invalid pragma within the source file
 
@@ -412,7 +437,7 @@
 
   # Now, execute the test file.
   start_time = time.time()
-  report = execution_monitor(file_path, pragmas)
+  report = execution_monitor(file_path, pragmas, securitylayers)
 
   # Calculate the time taken for the test
   end_time = time.time()
@@ -447,7 +472,7 @@
 
 
 
-def execution_monitor(file_path, pragma_dictionary):
+def execution_monitor(file_path, pragma_dictionary, securitylayers):
   """
   <Purpose>
     Executes a unit test written with a source contained in file_path. If the source
@@ -459,7 +484,9 @@
   <Arguments>
     file_path: file to be executed under the framework
     pragma_dictionary: dictionary of pragmas within this test file
-
+    securitylayers: A list of security layers to use. If no security are 
+      selected, this should have a value of None 
+      
   <Exceptions>
     None
 
@@ -474,25 +501,33 @@
   # Status report.
   report = { }
 
-  executable = sys.executable
-  popen_args = [ executable ]
-
+  popen_args = []
+  popen_args.append(sys.executable)
+  
   if pragma_dictionary.has_key(REPY_PRAGMA):
-    repy = 'repy.py'
-    default_restriction = 'restrictions.default'
+    restrictions = 'restrictions.default'
+    otherargs = []
     
+    repyArgs = pragma_dictionary[REPY_PRAGMA]
+    
     # Did the user specify a non-default restrictions file?
-    repyArgs = pragma_dictionary[REPY_PRAGMA]
-    if not repyArgs: 
-      repyArgs = default_restriction
+    if repyArgs: 
+      arguments = repyArgs.split(" ")
+      
+      # The first argument is the restrictions file
+      restrictions = arguments[0]
+      # The remaining arguments are the program's arguments
+      otherargs = arguments[1:]
    
-    popen_args.append(repy)
-
-    # For tests requiring repy arguments besides restrictions.default
-    # the user must specify them after the pragma
-    arguments = repyArgs.split(" ")
-    for element in arguments:
-      popen_args.append(element)
+    popen_args.append('repy.py')
+    popen_args.append(restrictions)
+    if securitylayers != None:
+      popen_args.append('encasementlib.repy')
+      for layer in securitylayers:
+        popen_args.append(layer)
+    
+    for arg in otherargs:
+      popen_args.append(arg)
   
   popen_args.append(file_path)
 
@@ -503,12 +538,16 @@
   if pragma_dictionary.has_key(OUT_PRAGMA):
     expected_out = pragma_dictionary[OUT_PRAGMA]
     
-    if not expected_out and not out: # pragma out
+    # pragma out
+    if not expected_out and not out: 
       report[OUT_PRAGMA] = (None, expected_out)
-    elif not expected_out in out: # pragma out [ARGUMENT]
+      
+    # pragma out [ARGUMENT]
+    elif not expected_out in out: 
       report[OUT_PRAGMA] = (out, expected_out)
-    
-  elif out: # If not, make sure the standard out is empty.
+      
+  # If not, make sure the standard out is empty.
+  elif out: 
     report[ERROR_PRAGMA] = (out, None)
 
 
@@ -516,15 +555,18 @@
   if pragma_dictionary.has_key(ERROR_PRAGMA):
     expected_error = pragma_dictionary[ERROR_PRAGMA]
     
-    if not expected_error and not  error: # pragma error
+    # pragma error
+    if not expected_error and not  error: 
       report[ERROR_PRAGMA] = (None, expected_error)
-    elif not expected_error in error: # pragma error [ARGUMENT]
+      
+    # pragma error [ARGUMENT]
+    elif not expected_error in error: 
       report[ERROR_PRAGMA] = (error, expected_error)
-      
-  elif error: # If not, make sure the standard error is empty.
+  
+  # If not, make sure the standard error is empty. 
+  elif error: 
     report[ERROR_PRAGMA] = (error, None)
-
-
+  
   return report
 
  
@@ -588,18 +630,22 @@
     
   """
   if not file_name.startswith(SYNTAX_PREFIX):
-    raise InvalidTestFileError(file_name)
+    raise InvalidTestFileError("Error: Unit test file name must start with '"+\
+      SYNTAX_PREFIX +"'. Filename '"+file_name+"' is invalid.")
   if not file_name.endswith(SYNTAX_SUFFIX):
-    raise InvalidTestFileError(file_name)
+    raise InvalidTestFileError("Error: Unit test file name must end with '"+\
+      SYNTAX_SUFFIX+"'. Filename '"+file_name+"' is invalid.")
   
   # Remove prefix and suffix.
   stripped = file_name[len(SYNTAX_PREFIX):-len(SYNTAX_SUFFIX)]
+
   # Partition the string.
   (module, separator, descriptor) = stripped.partition('_')
 
   # Empty module name is not allowed.
   if not module:
-    raise InvalidTestFileError(file_name)
+    raise InvalidTestFileError("Error: Cannot determine module name from filename '"+\
+      file_name+"'. Files must have a form of 'ut_MODULE[_DESCRIPTOR].py'")
 
   return (module, descriptor)
 
@@ -632,14 +678,16 @@
   
   for file_name in file_list:
     
+    # Skip invalid files
     try:
       (file_module, file_descrriptor) = parse_file_name(file_name)
-    except InvalidTestFileError: # This is not a valid test file.
+    except InvalidTestFileError:
       continue
     
     # Filter based on the module name.
     if module and file_module != module:
       continue
+      
     # Filter based on the descriptor.
     if descriptor and file_descrriptor != descriptor:
       continue
@@ -660,12 +708,7 @@
 if __name__ == "__main__":
   try:
     main()
-  except IOError:
-    raise
+  except IOError, e:
+    print "Error: No such file or directory: '"+e.filename+"'"
   except InvalidTestFileError, e:
     print 'Invalid file name syntax:', e
-  except:
-    print 'Internal error. Trace:'
-    print_dashes()
-    raise
-
