 2945/0xbe0f208:  fork()		 = 0 0
 2945/0xbe0f208:  getpid(0x0, 0x0, 0x0)		 = 2945 0
 2945/0xbe0f208:  close(0x4)		 = 0 0
 2945/0xbe0f208:  bsdthread_create(0x1B7850, 0x34B300, 0x80000)		 = -1341648896 0
 2945/0x51d97d8:  fork()		 = 0 0
 2945/0xbe0f208:  select(0x0, 0x0, 0x0, 0x0, 0xBFFFE710)		 = 0 0
 2945/0xbe0f208:  open_nocancel("forwarder_rpc.py\0", 0x0, 0x1B6)		 = 4 0
 2945/0xbe0f208:  __semwait_signal(0xB03, 0xC03, 0x0)		 = 0 0
 2945/0xbe0f208:  fstat(0x4, 0xBFFFF020, 0x0)		 = 0 0
 2945/0xbe0f208:  fstat(0x4, 0xBFFFF0D0, 0x0)		 = 0 0
 2945/0xbe0f208:  lseek(0x4, 0x0, 0x1)		 = 0 0
 2945/0xbe0f208:  lseek(0x4, 0x0, 0x1)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x1B000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x4EF000 0
 2945/0xbe0f208:  fstat64(0x4, 0xBFFFF024, 0x3)		 = 0 0
 2945/0xbe0f208:  read_nocancel(0x4, "\"\"\"\nAuthor: Armon Dadgar, Eric Kimbrel\n\nDate: Feb 2009\n\nDescription: \n  This forwarder uses the NATLayer protocol to multiplex connections between\n  servers and clients, with the goal of providing communication with nodes\n  behind a NAT\n\n  Servers connect ", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "ssage(sockobj, \"GET|\"+str(key)+\"|\"+str(maxvals))\n    recvdata = session_recvmessage(sockobj)\n    # worked\n    if recvdata.endswith('OK'):\n      return recvdata[:-len('OK')].split(',')\n    raise Exception, \"Centralized lookup failed\"\n  finally:\n    sockobj.", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "= 0 and num2 != 0:\n    while True:\n      # Get the indexes of both lists\n      start1 = substrings1[subIndex1]\n      start2 = substrings2[subIndex2]\n    \n      # If the start index of one is lower than the other, then \n      # remove all members until we r", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, " -= 1\n  \n  return strIn\n          \n# Convert a string representation of a Dictionary back into a dictionary\ndef deserialize_dictObj(strDict, partitions):\n  # Remove dict brackets\n  strDict = strDict[1:len(strDict)-1]\n    \n  # Get key/value pairs by explodi", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "d the prefix\r\n  key = NAT_SRV_PREFIX + key\r\n\r\n  # Add to the advertising pool\r\n  NAT_ADVERTISE_POOL[key] = value\r\n\r\n# Stops advertising a server key    \r\ndef nat_stop_server_advertise(key):\r\n  # Alter the key, add the prefix\r\n  key = NAT_SRV_PREFIX + key\r\n", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "\n    # Check if we should terminate\r\n    if not NAT_ADVERTISE_STATE[\"run\"]:\r\n      break\r\n\r\n\n\n#end include NAT_advertisement.py\n#begin include deserialize.py\n#already included deserialize.py\n#end include deserialize.py\n#begin include Multiplexer.py\n\"\"\"\n\nAu", 0x1000)	 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "         The response message.\n          \n    \"\"\"\n    # Set the requestedID in the frame\n    self.referenceID = requestedID\n\n    # Set the frame content\n    self.content = response\n    \n    # Set the content length\n    self.contentLength = len(self.content", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "ntlength = int(contentlength)\n    \n      # Strip the last semicolon off\n      ref = int(ref.rstrip(MULTIPLEXER_FRAME_DIVIDER))\n    \n      # Setup the Frame\n      self.mesgType = msgtype\n      self.contentLength = contentlength\n      self.referenceID = ref\n", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "+str(self.defaultBufSize)+ \\\n    \" counter:\"+str(self.nextReferenceID)+ \\\n    \" info:\"+str(self.socketInfo)+\">\"\n  \n  \n  # Returns the status of the multiplexer\n  def isAlive(self):\n    \"\"\"\n    <Purpose>\n      Returns the status of the multiplexer. Since th", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, " frame!\n      self.socket.send(frame.toString())\n    \n    except Exception, exp:\n      # Store the error\n      self.error = (\"_sendFrame\", exp)\n      \n      # We need to close the multiplexer\n      self.close()\n      \n      # Re-raise the exception\n      r", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "elf.pendingSockets[refID][1].release()\n    except:\n      # This is just to be safe\n      pass\n    \n  def waitforconn(self, localip, localport, function):\n    \"\"\"\n    <Purpose>\n      Waits for a connection to a port. Calls function with a socket-like object", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "incoming_client_data(frame, socket)\n    \n    # Release the main dictionary lock\n    self.virtualSocketsLock.release()\n    \n    # Make sure the user code is safe, launch an event for it\n    try:\n      settimer(0, userfunc, (info[\"remoteip\"], info[\"remotepor", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "ne:\n            self._new_client(frame, refID)\n          else:\n            self._incoming_client_data(frame,socket)\n      \n        # We don't know what this is, so panic    \n        else:\n          raise Exception, \"Unhandled Frame type: \"+ str(frame)\n    ", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, ":\n        Read up to \"bytes\" input. Positive integer.\n    \n      blocking\n        Should the operation block until all \"bytes\" worth of data are read.\n        \n    <Exceptions>\n      If the socket is closed, an EnvironmentError will be raised. If bytes is ", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "   \n        # Reduce the size of outgoing avail\n        self.bufferInfo[\"outgoing\"] -= len(data)\n        \n        # Release the lock\n        self.socketLocks[\"send\"].release()\n          \n        # We need to explicitly leave the loop\n        break\n        ", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "  return mux_virtual_openconn(desthost, destport, virtualport, localip,localport,timeout)\n\n    # We need to establish a new multiplexer with this host\n  else:\n    # Get the correct function\n    openconn_func = MULTIPLEXER_FUNCTIONS[\"openconn\"]\n\n    # Try t", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "socket, thiscommhandle, listencommhandle)\n  \n  # Call waitforconn, and trigger our helper\n  handle = waitforconn_func(localip, localport, _add_ip_port_func)\n  \n  # Register the handle\n  MULTIPLEXER_WAIT_HANDLES[key] = handle\n  \n  # Do a virtual waitforconn", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "alport))\n  \n  # Register the ip/port function for new multiplexers\n  MULTIPLEXER_WAIT_FUNCTIONS[key] = function\n  \n  # Map this waitforconn to all existing multiplexers\n  for (key, mux) in MULTIPLEXER_OBJECTS.items():\n    try:\n      mux.waitforconn(localip", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "ster with a forwarder\n# This expects a MAC address as a parameter\nRPC_REGISTER_SERVER = \"reg_serv\"    \n\n# This allows a server to de-register from a forwarder\n# This expects a MAC address as a parameter, or None to deregister all MAC's \nRPC_DEREGISTER_SERV", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, " break\n\n  if not connected:\n    raise EnvironmentError, \"Could not connect to forwarder\"\n\n  \n  # Create an RPC request\n  rpc_dict = {RPC_FUNCTION:RPC_CLIENT_INIT,RPC_PARAM:{\"server\":destmac,\"port\":destport}}\n\n  # Send the RPC request\n  socket.send(RPC_enco", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "ied values in case we have to redo the waitforconn\n  orig_forwarderIP = forwarderIP\n  orig_forwarderPort = forwarderPort\n  orig_forwarderCltPort = forwarderCltPort\n\n\n  # Do we already have a mux? If not create a new one\n  if NAT_STATE_DATA[\"mux\"] == None:\n", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "nat_waitforconn\n    \n  <Arguments>\n    handle:\n        Handle returned by nat_waitforconn.\n  \n  \"\"\"\n  NAT_STOP_LOCK.acquire()\n  \n  # Get the mux\n  mux = NAT_STATE_DATA[\"mux\"]\n  \n  # Check the status of the mux, is it alive?\n  if mux != None and not mux.isA", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "\n\n# check to see if the nat_waitforconn is still active\ndef nat_isalive():\n\n  # Check if our current mux is dead (if it exists)\n  if NAT_STATE_DATA[\"mux\"] == None or not NAT_STATE_DATA[\"mux\"].isAlive():\n    # Delete the mux\n\n    for key in NAT_STATE_DATA.k", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "D_LOCK.acquire()  \n    # Iterate through every mac, removing it\n    for mac in serverinfo[\"mac\"]:\n      del MAC_ID_LOOKUP[mac]\n    MAC_ID_LOCK.release()\n    \n    # Clear the set\n    serverinfo[\"mac\"].clear()\n    \n    \n  # Close the multiplexer if there are", 0x1000)		 = 4096 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x525000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x5A5000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x7A5000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x10C0000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0xFFFFFFFF00000000)		 = 0x11C0000 0
 2945/0x51d97d8:  __semwait_signal(0xB03, 0xC03, 0x0)		 = 0 0
 2945/0x51d97d8:  __semwait_signal(0xB03, 0xC03, 0x0)		 = 0 0
 2945/0xbe0f208:  read_nocancel(0x4, "NAT_STATUS_CONFIRMED)\n  except Exception, exp:\n    # DEBUG\n    if DEBUG3: print getruntime(), \"Error while opening virtual socket to \",servermac,\"Error:\",str(exp)\n    \n    return (False,NAT_STATUS_FAILED)\n\n\n\n# Handle a remote procedure call\ndef new_rpc(con", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "mux.socketInfo[\"conn_id\"]\n  \n  # DEGUG\n  if DEBUG2: print getruntime(),\"#\",conn_id,\"Multiplexer had fatal error in:\",errorloc,\"due to:\",excep \n  \n  # De-register this multiplexer\n  deregister_server(conn_id,None)\n\n# Handle new servers\ndef new_server(remote", 0x1000)		 = 4096 0
 2945/0xbe0f208:  read_nocancel(0x4, "              RPC_CLIENT_INIT:new_client}\n                  \n# This dictionary defines the security requirements for a function\n# So that it is handled in new_rpc rather than in every RPC function\nRPC_FUNCTION_SECURITY = {RPC_EXTERNAL_ADDR:set([TYPE_MUX, T", 0x1000)		 = 1049 0
 2945/0xbe0f208:  read_nocancel(0x4, "              RPC_CLIENT_INIT:new_client}\n                  \n# This dictionary defines the security requirements for a function\n# So that it is handled in new_rpc rather than in every RPC function\nRPC_FUNCTION_SECURITY = {RPC_EXTERNAL_ADDR:set([TYPE_MUX, T", 0x1000)		 = 0 0
 2945/0xbe0f208:  close_nocancel(0x4)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x1B000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x0)		 = 0x50A000 0
 2945/0xbe0f208:  munmap(0x4EF000, 0x1B000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0xFFFFFFFF00000000)		 = 0x565000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x0)		 = 0x5E5000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x0)		 = 0x625000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x0)		 = 0x665000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x0)		 = 0x6A5000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x6E5000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x725000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x765000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1000000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1040000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1080000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1100000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1140000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1180000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1200000 0
 2945/0xbe0f208:  munmap(0x1200000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1200000 0
 2945/0xbe0f208:  munmap(0x1200000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1200000 0
 2945/0xbe0f208:  munmap(0x1200000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1200000 0
 2945/0xbe0f208:  munmap(0x1200000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1200000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1240000 0
 2945/0xbe0f208:  munmap(0x1240000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1240000 0
 2945/0xbe0f208:  munmap(0x1240000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1240000 0
 2945/0xbe0f208:  munmap(0x1240000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1240000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1280000 0
 2945/0xbe0f208:  munmap(0x1280000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1280000 0
 2945/0xbe0f208:  munmap(0x1280000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1280000 0
 2945/0xbe0f208:  munmap(0x1280000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1280000 0
 2945/0xbe0f208:  munmap(0x1280000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1280000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x0)		 = 0x12C0000 0
 2945/0xbe0f208:  munmap(0x12C0000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x0)		 = 0x12C0000 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1300000 0
 2945/0xbe0f208:  munmap(0x1300000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1300000 0
 2945/0xbe0f208:  munmap(0x1300000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1300000 0
 2945/0xbe0f208:  munmap(0x1300000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1300000 0
 2945/0xbe0f208:  munmap(0x1300000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1300000 0
 2945/0xbe0f208:  munmap(0x1300000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1300000 0
 2945/0xbe0f208:  munmap(0x1300000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1300000 0
 2945/0xbe0f208:  munmap(0x1300000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x40000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0x1300000 0
 2945/0xbe0f208:  munmap(0x625000, 0x40000)		 = 0 0
 2945/0xbe0f208:  munmap(0x5E5000, 0x40000)		 = 0 0
 2945/0xbe0f208:  munmap(0x5A5000, 0x40000)		 = 0 0
 2945/0xbe0f208:  munmap(0x565000, 0x40000)		 = 0 0
 2945/0xbe0f208:  munmap(0x525000, 0x40000)		 = 0 0
 2945/0xbe0f208:  munmap(0x1200000, 0x40000)		 = 0 0
 2945/0xbe0f208:  mmap(0x0, 0x5000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0xA3000 0
 2945/0xbe0f208:  mmap(0x0, 0x4000, 0x3, MAP_ANON|MAP_PRIV, 0x3000000, 0x100000000)		 = 0xA8000 0
 2945/0xbe0f208:  munmap(0xA8000, 0x4000)		 = 0 0
 2945/0xbe0f208:  socket(0x2, 0x2, 0x0)		 = 4 0
 2945/0xbe0f208:  connect(0x4, 0xBFFFDF08, 0x10)		 = 0 0
 2945/0xbe0f208:  getsockname(0x4, 0xBFFFDF0C, 0xBFFFDF8C)		 = 0 0
 2945/0xbe0f208:  close(0x4)		 = 0 0
 2945/0xbe0f208:  socket(0x2, 0x1, 0x0)		 = 4 0
 2945/0xbe0f208:  setsockopt(0x4, 0xFFFF, 0x4)		 = 0 0
 2945/0xbe0f208:  bind(0x4, 0xBFFFDF0C, 0x10)		 = 0 0
 2945/0xbe0f208:  listen(0x4, 0x5, 0x10)		 = 0 0
 2945/0xbe0f208:  bsdthread_create(0x1B7850, 0x3814F0, 0x80000)		 = -1341116416 0
 2945/0xbb2dc80:  fork()		 = 0 0
 2945/0xbb2dc80:  __semwait_signal(0xB03, 0xC03, 0x0)		 = 0 0
 2945/0xbe0f208:  select(0x0, 0x0, 0x0, 0x0, 0xBFFFE110)		 = 0 0
 2945/0xbe0f208:  socket(0x2, 0x1, 0x0)		 = 5 0
 2945/0xbe0f208:  setsockopt(0x5, 0xFFFF, 0x4)		 = 0 0
 2945/0xbe0f208:  bind(0x5, 0xBFFFDF0C, 0x10)		 = 0 0
 2945/0xbe0f208:  listen(0x5, 0x5, 0x10)		 = 0 0
 2945/0xbe0f208:  bsdthread_create(0x1B7850, 0x38B4B0, 0x80000)		 = -1340583936 0
 2945/0x91565d0:  fork()		 = 0 0
 2945/0x91565d0:  __semwait_signal(0xB03, 0xC03, 0x0)		 = 0 0
 2945/0xbe0f208:  select(0x0, 0x0, 0x0, 0x0, 0xBFFFE060)		 = 0 0
 2945/0xbe0f208:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0xbe0f208:  __sysctl(0x46FCD4, 0x2, 0x46FE64)		 = 0 0
 2945/0xbe0f208:  fstat64(0x1, 0xBFFFDF14, 0x46FE64)		 = 0 0
 2945/0xbe0f208:  ioctl(0x1, 0x4004667A, 0xBFFFDF7C)		 = 0 0
 2945/0xbe0f208:  write_nocancel(0x1, "1.50540304184\0", 0xD)		 = 13 0
 2945/0xbe0f208:  __sysctl(0x46FE64, 0x2, 0x46F2D4)		 = 0 0
 2945/0xbe0f208:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  select(0x0, 0x0, 0x0, 0x0, 0xB0184220)		 = 0 0
 2945/0xbe0f208:  write_nocancel(0x1, " \0", 0x1)		 = 1 0
 2945/0xbe0f208:  __sysctl(0x46FCD4, 0x2, 0x46FE64)		 = 0 0
 2945/0xbe0f208:  __sysctl(0x46FE64, 0x2, 0x46F2D4)		 = 0 0
 2945/0xbe0f208:  write_nocancel(0x1, "Forwarder Started on.5\0", 0x14)		 = 20 0
 2945/0xbe0f208:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0xbe0f208:  __sysctl(0x46FCD4, 0x2, 0x46FE64)		 = 0 0
 2945/0xbe0f208:  write_nocancel(0x1, " erDictmodule.so\0", 0x1)		 = 1 0
 2945/0xbe0f208:  __sysctl(0x46FE64, 0x2, 0x46F2D4)		 = 0 0
 2945/0xbe0f208:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0xbe0f208:  write_nocancel(0x1, "192.168.1.127\0", 0xD)		 = 13 0
 2945/0xbe0f208:  __sysctl(0x46FCD4, 0x2, 0x46FE64)		 = 0 0
 2945/0xbe0f208:  __sysctl(0x46FE64, 0x2, 0x46F2D4)		 = 0 0
 2945/0xbe0f208:  write_nocancel(0x1, "\n\0", 0x1)		 = 1 0
 2945/0xbe0f208:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0xbe0f208:  __sysctl(0x46FCD4, 0x2, 0x46FE64)		 = 0 0
 2945/0x91565d0:  select(0x0, 0x0, 0x0, 0x0, 0xB0184220)		 = 0 0
 2945/0x91565d0:  select(0x0, 0x0, 0x0, 0x0, 0xB0184220)		 = 0 0
 2945/0x91565d0:  select(0x7, 0x0, 0xB0183828, 0x0, 0xB01838A8)		 = 1 0
 2945/0x91565d0:  connect(0x6, 0xB0183928, 0x10)		 = -1 Err#56
 2945/0x91565d0:  fcntl(0x6, 0x3, 0x0)		 = 6 0
 2945/0x91565d0:  fcntl(0x6, 0x4, 0x2)		 = 0 0
 2945/0x91565d0:  sendto(0x6, 0x6FF534, 0x3)		 = 3 0
 2945/0x91565d0:  __sysctl(0x46FEB4, 0x2, 0x46F2D4)		 = 0 0
 2945/0x91565d0:  sendto(0x6, 0x46FE44, 0x33)		 = 51 0
 2945/0x91565d0:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FE64, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  recvfrom(0x6, 0x6FF5D4, 0x1)		 = 1 0
 2945/0x91565d0:  __sysctl(0x46FCD4, 0x2, 0x46FEB4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FEB4, 0x2, 0x46FE64)		 = 0 0
 2945/0x91565d0:  select(0x7, 0xB01837F8, 0xB0183778, 0xB01836F8, 0xB0183878)		 = 1 0
 2945/0x91565d0:  recvfrom(0x6, 0x6FF494, 0x1)		 = 1 0
 2945/0x91565d0:  __sysctl(0x46FE64, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FCD4, 0x2, 0x46FEB4)		 = 0 0
 2945/0x91565d0:  select(0x7, 0xB01837F8, 0xB0183778, 0xB01836F8, 0xB0183878)		 = 1 0
 2945/0x91565d0:  recvfrom(0x6, 0x6FF614, 0x2)		 = 2 0
 2945/0x91565d0:  __sysctl(0x46FEB4, 0x2, 0x46FE64)		 = 0 0
 2945/0x91565d0:  close(0x6)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FE64, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FE64, 0x2, 0x46F2D4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  socket(0x2, 0x1, 0x0)		 = 6 0
 2945/0x91565d0:  setsockopt(0x6, 0xFFFF, 0x4)		 = 0 0
 2945/0x91565d0:  fcntl(0x6, 0x3, 0x0)		 = 2 0
 2945/0x91565d0:  fcntl(0x6, 0x4, 0x6)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FCD4, 0x2, 0x46FE64)		 = 0 0
 2945/0x91565d0:  connect(0x6, 0xB0183928, 0x10)		 = -1 Err#36
 2945/0x91565d0:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FCD4, 0x2, 0x46FEB4)		 = 0 0
 2945/0x91565d0:  select(0x7, 0xB01837F8, 0xB0183778, 0xB01836F8, 0xB0183878)		 = 1 0
 2945/0xbb2dc80:  select(0x5, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbe0f208:  select(0x0, 0x0, 0x0, 0x0, 0xBFFFE300)		 = 0 0
 2945/0xbe0f208:  __sysctl(0x46FCD4, 0x2, 0x46FEB4)		 = 0 0
 2945/0xbe0f208:  __sysctl(0x46FEB4, 0x2, 0x46FE64)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0x91565d0:  select(0x0, 0x0, 0x0, 0x0, 0xB0183D20)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FE64, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FCD4, 0x2, 0x46FEB4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FEB4, 0x2, 0x46FE64)		 = 0 0
 2945/0x91565d0:  socket(0x2, 0x1, 0x0)		 = 6 0
 2945/0x91565d0:  setsockopt(0x6, 0xFFFF, 0x4)		 = 0 0
 2945/0x91565d0:  fcntl(0x6, 0x3, 0x0)		 = 2 0
 2945/0x91565d0:  fcntl(0x6, 0x4, 0x6)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FE64, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  connect(0x6, 0xB0183928, 0x10)		 = -1 Err#36
 2945/0x91565d0:  select(0x7, 0x0, 0xB0183828, 0x0, 0xB01838A8)		 = 1 0
 2945/0x91565d0:  connect(0x6, 0xB0183928, 0x10)		 = -1 Err#56
 2945/0x91565d0:  fcntl(0x6, 0x3, 0x0)		 = 6 0
 2945/0x91565d0:  fcntl(0x6, 0x4, 0x2)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FEB4, 0x2, 0x46FE64)		 = 0 0
 2945/0x91565d0:  sendto(0x6, 0x6FF5D4, 0x3)		 = 3 0
 2945/0x91565d0:  __sysctl(0x46FE64, 0x2, 0x46F2D4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46F2D4, 0x2, 0x46FEB4)		 = 0 0
 2945/0x91565d0:  sendto(0x6, 0x46FCB4, 0x33)		 = 51 0
 2945/0x91565d0:  __sysctl(0x46FEB4, 0x2, 0x46FE64)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FCD4, 0x2, 0x46FE64)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0x91565d0:  select(0x7, 0xB01837F8, 0xB0183778, 0xB01836F8, 0xB0183878)		 = 1 0
 2945/0x91565d0:  recvfrom(0x6, 0x6FF4F4, 0x1)		 = 1 0
 2945/0x91565d0:  __sysctl(0x46FE64, 0x2, 0x46F2D4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  select(0x7, 0xB01837F8, 0xB0183778, 0xB01836F8, 0xB0183878)		 = 1 0
 2945/0x91565d0:  recvfrom(0x6, 0x6FF614, 0x1)		 = 1 0
 2945/0x91565d0:  __sysctl(0x46FCD4, 0x2, 0x46FE64)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FE64, 0x2, 0x46F2D4)		 = 0 0
 2945/0x91565d0:  select(0x7, 0xB01837F8, 0xB0183778, 0xB01836F8, 0xB0183878)		 = 1 0
 2945/0x91565d0:  recvfrom(0x6, 0x6FF534, 0x2)		 = 2 0
 2945/0x91565d0:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  close(0x6)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FCD4, 0x2, 0x46FE64)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbe0f208:  select(0x0, 0x0, 0x0, 0x0, 0xBFFFE300)		 = 0 0
 2945/0xbe0f208:  __sysctl(0x46FE64, 0x2, 0x46F2D4)		 = 0 0
 2945/0xbe0f208:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0x91565d0:  select(0x0, 0x0, 0x0, 0x0, 0xB0183D20)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FCD4, 0x2, 0x46FE64)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FE64, 0x2, 0x46F2D4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  socket(0x2, 0x1, 0x0)		 = 6 0
 2945/0x91565d0:  setsockopt(0x6, 0xFFFF, 0x4)		 = 0 0
 2945/0x91565d0:  fcntl(0x6, 0x3, 0x0)		 = 2 0
 2945/0x91565d0:  fcntl(0x6, 0x4, 0x6)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FCD4, 0x2, 0x46FE64)		 = 0 0
 2945/0x91565d0:  connect(0x6, 0xB0183928, 0x10)		 = -1 Err#36
 2945/0x91565d0:  select(0x7, 0x0, 0xB0183828, 0x0, 0xB01838A8)		 = 1 0
 2945/0x91565d0:  connect(0x6, 0xB0183928, 0x10)		 = -1 Err#56
 2945/0x91565d0:  fcntl(0x6, 0x3, 0x0)		 = 6 0
 2945/0x91565d0:  fcntl(0x6, 0x4, 0x2)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  sendto(0x6, 0x6FF4F4, 0x3)		 = 3 0
 2945/0x91565d0:  __sysctl(0x46FCD4, 0x2, 0x46FEB4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FEB4, 0x2, 0x46F2D4)		 = 0 0
 2945/0x91565d0:  sendto(0x6, 0x46FE44, 0x33)		 = 51 0
 2945/0x91565d0:  __sysctl(0x46F2D4, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FE64, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  recvfrom(0x6, 0x6FF494, 0x1)		 = 1 0
 2945/0x91565d0:  __sysctl(0x46FCD4, 0x2, 0x46FEB4)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0x91565d0:  select(0x7, 0xB01837F8, 0xB0183778, 0xB01836F8, 0xB0183878)		 = 1 0
 2945/0x91565d0:  __sysctl(0x46FEB4, 0x2, 0x46FE64)		 = 0 0
 2945/0x91565d0:  select(0x7, 0xB01837F8, 0xB0183778, 0xB01836F8, 0xB0183878)		 = 1 0
 2945/0x91565d0:  recvfrom(0x6, 0x6FF534, 0x1)		 = 1 0
 2945/0x91565d0:  __sysctl(0x46FE64, 0x2, 0x46FCD4)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FCD4, 0x2, 0x46FEB4)		 = 0 0
 2945/0x91565d0:  select(0x7, 0xB01837F8, 0xB0183778, 0xB01836F8, 0xB0183878)		 = 1 0
 2945/0x91565d0:  recvfrom(0x6, 0x6FF5D4, 0x2)		 = 2 0
 2945/0x91565d0:  __sysctl(0x46FEB4, 0x2, 0x46FE64)		 = 0 0
 2945/0x91565d0:  close(0x6)		 = 0 0
 2945/0x91565d0:  __sysctl(0x46FE64, 0x2, 0x46FCD4)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
 2945/0xbb2dc80:  select(0x6, 0xB0102428, 0xB01023A8, 0xB0102328, 0xB01024A8)		 = 0 0
