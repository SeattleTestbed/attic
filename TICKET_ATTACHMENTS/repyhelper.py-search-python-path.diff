Index: portability/repyhelper.py
===================================================================
--- portability/repyhelper.py	(revision 2540)
+++ portability/repyhelper.py	(working copy)
@@ -17,6 +17,7 @@
 
 import os # for file checks
 import inspect # for fiddling with callstack/module namespaces
+import sys
 
 
 TRANSLATION_TAGLINE = "### Automatically generated by repyhelper.py ###"
@@ -203,7 +204,7 @@
   
   <Arguments>
     repyfilename:
-      A valid repy file name that exists. 
+      A valid repy file name that exists in the python path. 
     shared_mycontext:
       Optional parameter whether or not the mycontext of this translation should 
       be shared, or the translation should have it's own. Default True
@@ -229,17 +230,29 @@
     string can be used with __import__ to import the translated module.
   """
 
-  if not os.path.isfile(filename):
-    raise ValueError("File " + filename + " does not exist")
+  filedir = None     # The directory the file is in.
+  filepath = None    # The full path to the file including the filename.
 
+  # Determine in which directory in the PYTHONPATH this file is located.  
+  for pathdir in sys.path:
+    possiblefilepath = os.path.join(pathdir, filename)
+    if os.path.isfile(possiblefilepath):
+      filepath = possiblefilepath
+      filedir = pathdir
+      break
+  
+  if filepath is None:
+    raise ValueError("File " + filename + " does not exist in any python path directory.")
+
   if callargs is None:
     callargs = []
   modulepath = _get_module_name(filename)
   modulename = os.path.basename(modulepath)
   generatedfilename = modulename + ".py"
+  generatedfilepath = os.path.join(filedir, generatedfilename)
   
-  if force_overwrite or _translation_is_needed(filename, generatedfilename): 
-    _generate_python_file_from_repy(filename, generatedfilename, shared_mycontext, callfunc, callargs)
+  if force_overwrite or _translation_is_needed(filepath, generatedfilepath): 
+    _generate_python_file_from_repy(filepath, generatedfilepath, shared_mycontext, callfunc, callargs)
 
   #Only return the basename, it's what __import__ expects (assuming cwd is on pythonpath)
   return modulename
