Index: preparetest.py
===================================================================
--- preparetest.py	(revision 5161)
+++ preparetest.py	(working copy)
@@ -12,22 +12,18 @@
   October 3, 2008
 
 <Description>
-  This script has been adapted from the bash script preparetest.  The
-  script first erases all the files in the target folder, then copies
-  the necessary test files to it. Afterwards, the .mix files in the
-  target folder are run through the preprocessor.  It is required that
-  the folder passed in as an argument to the script exists.
+  This script was adapted from the bash script preparetest. This script first
+  erases all the files in a target directory, and then copies the necessary 
+  files to run repy to it. Afterwards, the .mix files in the target directory
+  are run through the preprocessor.  The target directory that is passed to the
+  script must exist.
 
 <Usage>
-  preparetest.py <target_folder> <-t>
+  preparetest.py  [-t] [--randomports] [--checkapi] [-v] <target_directory>
 
-  if -t is specified, the repy tests will also be included, otherwise, they will not
+  -t specifies whether the repy tests will also be included, by default they are not
 
 <Notes>
-  This file is used as a library by trunk/www/deploy_state_transitions.py
-  If you make ANY changes to this file please let Ivan know so that the
-  other script can continue to function correctly. Thanks. (IB 01/19/09)
-
   This file is also used directly by trunk/dist/make_base_installers.py. Also
   let Zack know if any adaptions are made to this file so the base installers
   can continue to be created correctly.  See ticket #501 about removing or
@@ -35,22 +31,26 @@
 
 """
 
+import os
 import sys
 import glob
-import os
 import random
 import shutil
+import optparse
 import subprocess
-import sys
 
+
+# import testportfiller from root_dir\repy\tests.
 sys.path.insert(0, os.path.join(os.getcwd(), "repy", "tests"))
 import testportfiller
+# Remove root_dir\repy\tests from the path
 sys.path = sys.path[1:]
 
-
-#define a function to use for copying the files matching the file expression to the target folder
-#file_expr may contain wildcards
-#target must specify an existing directory with no wildcards
+# This function copies files (in the current directory) that match the 
+# expression to the target folder
+# The source files are from the current directory.
+# The target directory must exist.
+# file_expr may contain wildcards
 def copy_to_target(file_expr, target):
   files_to_copy = glob.glob(file_expr)
   for file_path in files_to_copy:
@@ -58,107 +58,128 @@
       shutil.copyfile(file_path,target +"/"+os.path.basename(file_path))
 
 
-#iterate through the .mix files in current folder and run them through the preprocessor
-#script_path must specify the name of the preprocessor script
-#the working directory must be set to the directory containing the preprocessor script prior to executing this function.
-def process_mix(script_path):
+# Run the .mix files in current directory through the preprocessor 
+# script_path specifies the name of the preprocessor script
+# The preprocessor script must be in the working directory
+def process_mix(script_path, verbose):
   mix_files = glob.glob("*.mix")
- 
+  error_list = []
+
   for file_path in mix_files:
-    #generate a .py file for the .mix file specified by file_path
+    # Generate a .py file for the .mix file specified by file_path
     processed_file_path = (os.path.basename(file_path)).replace(".mix",".py")
     (theout, theerr) =  exec_command(sys.executable + " " + script_path + " " + file_path + " " + processed_file_path)
 
+    # If there was any problem processing the files, then notify the user.
+    if theerr:
+      print "Unable to process the file: " + file_path
+      error_list.append((file_path, theerr))
+      
+  # If the verbose option is on then print the error.  
+  if verbose and len(error_list) > 0:
+    print "\n" + '#'*50 + "\nPrinting all the exceptions (verbose option)\n" + '#'*50
+    for file_name, error in error_list:
+      print "\n" + file_name + ":"
+      print error
+      print '-'*80
 
+
 def exec_command(command):
-# Windows does not like close_fds and we shouldn't need it so...
-  p =  subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+  # Windows does not like close_fds and we shouldn't need it so...
+  process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
 
   # get the output and close
-  theout = p.stdout.read()
-  p.stdout.close()
+  theout = process.stdout.read()
+  process.stdout.close()
 
   # get the errput and close
-  theerr = p.stderr.read()
-  p.stderr.close()
+  theerr = process.stderr.read()
+  process.stderr.close()
 
   # FreeBSD prints on stdout, when it gets a signal...
-  # I want to look at the last line.   it ends in \n, so I use index -2
+  # I want to look at the last line. It ends in \n, so I use index -2
   if len(theout.split('\n')) > 1 and theout.split('\n')[-2].strip() == 'Terminated':
-    # lose the last line
+    # remove the last line
     theout = '\n'.join(theout.split('\n')[:-2])
     
-    # however we threw away an extra '\n' if anything remains, let's replace it
+    # However we threw away an extra '\n'. If anything remains, let's replace it
     if theout != '':
       theout = theout + '\n'
 
-  # everyone but FreeBSD uses stderr
+  # OS's besides FreeBSD uses stderr
   if theerr.strip() == 'Terminated':
     theerr = ''
 
   # Windows isn't fond of this either...
   # clean up after the child
-#  os.waitpid(p.pid,0)
+  #os.waitpid(p.pid,0)
 
   return (theout, theerr)
 
 
-helpstring = """python preparetest.py [-t -randomports -checkapi] <foldername>"""
 
 # Prints the given error message and the help string, then exits
-def help_exit(errMsg):
+def help_exit(errMsg, parser):
   print errMsg
-  print helpstring
+  parser.print_help()
   sys.exit(1)
 
 def main():
-  repytest = False
-  RANDOMPORTS = False
-  copy_checkapi = False
 
-  target_dir = None
-  for arg in sys.argv[1:]:
-    # -t means we will copy repy tests
-    if arg == '-t':
-      repytest = True
+  # Parse the options provided. 
+  helpstring = "python preparetest.py [-t] [-v] [-c] [-r] <target>"
+  parser = optparse.OptionParser(usage=helpstring)
 
-    # The user wants us to fill in the port numbers randomly.
-    elif arg == '-randomports':
-      RANDOMPORTS = True
+  parser.add_option("-t", "--testfiles", action="store_true",
+                    dest="include_tests", default=False,
+                    help="Include the test files in the output directory.")
+  parser.add_option("-v", "--verbose", action="store_true",
+                    dest="verbose", default=False,
+                    help="Show more output on failure")
+  parser.add_option("-c", "--checkapi", action="store_true", 
+                    dest="copy_checkapi", default=False,
+                    help="Include checkAPI files")
+  parser.add_option("-r", "--randomports", action="store_true", 
+                    dest="randomports", default=False,
+                    help="Fill in the ports randomly")
 
-    elif arg == "-checkapi":
-      copy_checkapi = True
+  (options, args) = parser.parse_args()
 
-    # Not a flag? Assume it's the target directory
-    else:
-      target_dir = arg
+  # Extract the target directory.
+  if len(args) == 0:
+    help_exit("Please pass the target directory as a parameter.", parser)
+  else:
+    target_dir = args[0]
 
-  # We need a target dir. If one isn't found in argv, quit.
-  if target_dir is None:
-    help_exit("Please pass the target directory as a parameter.")
+  # Make sure they gave us a valid directory
+  if not( os.path.isdir(target_dir) ):
+    help_exit("Supplied target is not a directory", parser)
 
-  #store root directory
+  # Set variables according to the provided options.
+  repytest = options.include_tests
+  RANDOMPORTS = options.randomports
+  verbose = options.verbose
+  copy_checkapi = options.copy_checkapi
+
+
+  # Store current directory
   current_dir = os.getcwd()
 
-  # Make sure they gave us a valid directory
-  if not( os.path.isdir(target_dir) ):
-    help_exit("given foldername is not a directory")
-
-  #set working directory to the test folder
+  # Set working directory to the target
   os.chdir(target_dir)	
   files_to_remove = glob.glob("*")
 
-  #clean the test folder
-  for f in files_to_remove: 
-    if os.path.isdir(f):
-      shutil.rmtree(f)		
+  # Empty the destination
+  for entry in files_to_remove: 
+    if os.path.isdir(entry):
+      shutil.rmtree(entry)		
     else:
-      os.remove(f)
+      os.remove(entry)
 
-  #go back to root project directory
+  # Return to previous working directory
   os.chdir(current_dir) 
 
-  #now we copy the necessary files to the test folder
+  # Copy the necessary files to the test folder
   copy_to_target("repy/*", target_dir)
   copy_to_target("nodemanager/*", target_dir)
   copy_to_target("portability/*", target_dir)
@@ -193,26 +214,26 @@
     #copy_to_target("assignments/webserver/*", target_dir)
     #copy_to_target("softwareupdater/test/*", target_dir)
 
-  #set working directory to the test folder
+  # Set working directory to the target
   os.chdir(target_dir)
 
-  #call the process_mix function to process all mix files in the target directory
-  process_mix("repypp.py")
+  # Call process_mix to process all mix files in the target directory
+  process_mix("repypp.py", verbose)
 
-  # set up dynamic port information
+  # Set up dynamic port information
   if RANDOMPORTS:
-    portstouseasints = random.sample(range(52000, 53000), 3)
-    portstouseasstr = []
-    for portint in portstouseasints:
-      portstouseasstr.append(str(portint))
+    ports_as_ints = random.sample(range(52000, 53000), 3)
+    ports_as_strings = []
+    for port in ports_as_ints:
+      ports_as_strings.append(str(port))
     
-    print "Randomly chosen ports: ",portstouseasstr
-    testportfiller.replace_ports(portstouseasstr, portstouseasstr)
+    print "Randomly chosen ports: ", ports_as_strings
+    testportfiller.replace_ports(ports_as_strings, ports_as_strings)
   else:
-    # if this isn't specified, just use the default ports...
+    # Otherwise use the default ports...
     testportfiller.replace_ports(['12345','12346','12347'], ['12345','12346','12347'])
 
-  #go back to root project directory
+  # Change back to root project directory
   os.chdir(current_dir) 
 
 
