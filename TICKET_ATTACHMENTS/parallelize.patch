Justin-Capposs-MacBook-Pro:seattle justincappos$ svn diff branches/repy_v2/seattlelib/parallelize.repy 
Index: branches/repy_v2/seattlelib/parallelize.repy
===================================================================
--- branches/repy_v2/seattlelib/parallelize.repy	(revision 7067)
+++ branches/repy_v2/seattlelib/parallelize.repy	(working copy)
@@ -187,7 +187,12 @@
 
 
 
-      
+#JAC: This is a fix for ticket #1306.   Closures work in odd ways and we 
+# need to move some globals out of scope...
+def _get_function_to_run(parellelizehandle, workercount):
+  def function_to_run():
+    parallelize_execute_function(parallelizehandle, workercount)
+  return function_to_run
 
 
 def parallelize_initfunction(targetlist, callerfunc,concurrentevents=5, *extrafuncargs):
@@ -249,10 +254,12 @@
     # this is scheduled without having race conditions
     parallelize_info_dict[parallelizehandle]['runninglist'].append(workercount)
     try:
-      
-      def function_to_run():
-        parallelize_execute_function(parallelizehandle, workercount)
-        
+      # See ticket #1306
+      # It is really important to have this odd call to a helper function.
+      # If you do not do this, the workercount will be in scope of the closure
+      # and it will increment a single global variable.
+      function_to_run = _get_function_to_run(parallelizehandle, workercount)
+
       createthread(function_to_run)
       
     except:

