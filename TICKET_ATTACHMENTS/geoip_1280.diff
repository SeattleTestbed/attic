Index: trunk/seattlelib/geoip_client.repy
===================================================================
--- trunk/seattlelib/geoip_client.repy	(revision 6899)
+++ trunk/seattlelib/geoip_client.repy	(working copy)
@@ -141,6 +141,9 @@
   if not result:
     raise Exception("Unable to contact the geoip server.")
 
+  if 'faultCode' in result:
+    raise Exception(result['faultString'])
+
   return result
 
 
Index: trunk/geoip_server/geoip_server.py
===================================================================
--- trunk/geoip_server/geoip_server.py	(revision 6899)
+++ trunk/geoip_server/geoip_server.py	(working copy)
@@ -26,8 +26,80 @@
 sys.path.append("./seattle/seattle_repy")
 import pygeoip
 import repyportability
+import xmlrpclib
 from SimpleXMLRPCServer import SimpleXMLRPCServer
 
+
+class SafeGeoIPServer(pygeoip.GeoIP):
+  """
+  <Purpose>
+    Provides safe wrappers around the GeoIP server method calls.
+    This allows us to check that each request is well-formatted before
+    executing them on pygeoip.
+
+    This class does not introduce any new methods; it only overrides
+    existing methods in pygeoip.GeoIP.
+
+  """
+  def record_by_addr(self, addr):
+    """
+    <Purpose>
+      Returns the GeoIP record for the specified IP address.
+
+    <Arguments>
+      addr: A public IPv4 address.
+
+    <Side Effects>
+      None
+
+    <Exceptions>
+      None
+
+    <Return>
+      A dictionary containing GeoIP information for the address
+      specified, if valid.
+      Returns False on errors.
+    """
+    if not _is_public_ipv4(addr):
+      return xmlrpclib.Fault(xmlrpclib.INVALID_METHOD_PARAMS, "Not a public IP address")
+
+    return super(SafeGeoIPServer, self).record_by_addr(addr)
+
+
+def _is_public_ipv4(addr):
+  """
+  <Purpose>
+    Determines if an IPv4 address is public or not.
+
+  <Arguments>
+    addr: An IPv4 address.
+
+  <Side Effects>
+    None
+
+  <Exceptions>
+    None, assuming that the provided value is a valid IPv4 address.
+
+  <Returns>
+    True if it is a public IP address, False otherwise.
+  """
+  # We need to do some range comparisons for Class B and C addresses,
+  # so preprocess them into ints.
+  ip_int_tokens = [int(token) for token in addr.split('.')]
+  if ip_int_tokens[0] == 10:
+    # Class A private address is in the form 10.*.*.*
+    return False
+  # Class B private addresses are in the range 172.16.0.0/16 to
+  # 172.31.255.255/16
+  elif ip_int_tokens[0] == 172:
+    if 16 <= ip_int_tokens[1] and ip_int_tokens[1] < 32:
+      return False
+  # Class C private addresses are in the form 192.168.*.*
+  elif ip_int_tokens[0:2] == [192, 168]:
+    return False
+  return True
+
+
 # Handle arguments
 if len(sys.argv) < 3:
     print "Usage: python geoip_server.py /path/to/GeoIP.dat PORT"
@@ -43,7 +115,7 @@
 server = SimpleXMLRPCServer((ext_ip, port), allow_none=True)
 
 # Initialize and register geoip object
-gic = pygeoip.GeoIP(geoipdb_filename)
+gic = SafeGeoIPServer(geoipdb_filename)
 server.register_instance(gic)
 
 # Run the server's main loop
