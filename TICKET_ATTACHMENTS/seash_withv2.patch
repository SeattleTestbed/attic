Index: seash/seash_dictionary.py
===================================================================
--- seash/seash_dictionary.py	(revision 6908)
+++ seash/seash_dictionary.py	(working copy)
@@ -578,6 +578,10 @@
 actually just a short-cut for the 'upload' and 'start' commands).   The
 arguments listed will be passed to the command when it is started.
 
+This command will make an educated guess as to what platform your
+program is written for (i.e. repyV1 or repyV2).  You can override this
+by using 'runv1' or 'runv2', respectively.
+
 Example:
 exampleuser@browsegood !> show log
 Log from '192.x.x.2:1224:v3':
@@ -611,7 +615,169 @@
       }},
   }},
 
+  'runv1':{
+    'name':'run', 'callback':None, 'example':'file [args ...]',
+    'summary':'Upload a file and start executing it as repyV1', 'help_text':"""
+Uploads a program to a vessel and starts it running.   (This command is
+actually just a short-cut for the 'upload' and 'startv1' commands).
+The arguments listed will be passed to the command when it is started.
 
+Example:
+exampleuser@browsegood !> show log
+Log from '192.x.x.2:1224:v3':
+
+Log from '193.x.x.42:1224:v18':
+
+Log from '219.x.x.62:1224:v4':
+
+Log from '192.x.x.2:1224:v12':
+
+exampleuser@browsegood !> run example.1.1.repy
+exampleuser@browsegood !> show log
+Log from '192.x.x.2:1224:v3':
+Hello World
+
+Log from '193.x.x.42:1224:v18':
+Hello World
+
+Log from '219.x.x.62:1224:v4':
+Hello World
+
+Log from '192.x.x.2:1224:v12':
+Hello World
+
+""", 'children':{
+      '[FILENAME]':{
+        'name':'filename', 'callback':command_callbacks.run_localfn, 'example':'[arg1, arg2, ...]',
+        'summary': 'Uploads the file to the vessels and starts running them, passing arguments if specified.',
+        'help_text':'','children':{
+          '[ARGUMENT]':{'name':'args', 'callback':command_callbacks.run_localfn_arg, 'help_text':'', 'children':{}},
+      }},
+  }},
+
+
+  'runv2':{
+    'name':'run', 'callback':None, 'example':'file [args ...]',
+    'summary':'Upload a file and start executing it as repyV2', 'help_text':"""
+Uploads a program to a vessel and starts it running.   (This command is
+actually just a short-cut for the 'upload' and 'startv2' commands).
+The arguments listed will be passed to the command when it is started.
+
+Example:
+exampleuser@browsegood !> show log
+Log from '192.x.x.2:1224:v3':
+
+Log from '193.x.x.42:1224:v18':
+
+Log from '219.x.x.62:1224:v4':
+
+Log from '192.x.x.2:1224:v12':
+
+exampleuser@browsegood !> run example.1.1.repy
+exampleuser@browsegood !> show log
+Log from '192.x.x.2:1224:v3':
+Hello World
+
+Log from '193.x.x.42:1224:v18':
+Hello World
+
+Log from '219.x.x.62:1224:v4':
+Hello World
+
+Log from '192.x.x.2:1224:v12':
+Hello World
+
+""", 'children':{
+      '[FILENAME]':{
+        'name':'filename', 'callback':command_callbacks.run_localfn, 'example':'[arg1, arg2, ...]',
+        'summary': 'Uploads the file to the vessels and starts running them, passing arguments if specified.',
+        'help_text':'','children':{
+          '[ARGUMENT]':{'name':'args', 'callback':command_callbacks.run_localfn_arg, 'help_text':'', 'children':{}},
+      }},
+  }},
+
+  'runv1':{
+    'name':'run', 'callback':None, 'example':'file [args ...]',
+    'summary':'Upload a file and start executing it as repyV1', 'help_text':"""
+Uploads a program to a vessel and starts it running.   (This command is
+actually just a short-cut for the 'upload' and 'startv1' commands).
+The arguments listed will be passed to the command when it is started.
+
+Example:
+exampleuser@browsegood !> show log
+Log from '192.x.x.2:1224:v3':
+
+Log from '193.x.x.42:1224:v18':
+
+Log from '219.x.x.62:1224:v4':
+
+Log from '192.x.x.2:1224:v12':
+
+exampleuser@browsegood !> run example.1.1.repy
+exampleuser@browsegood !> show log
+Log from '192.x.x.2:1224:v3':
+Hello World
+
+Log from '193.x.x.42:1224:v18':
+Hello World
+
+Log from '219.x.x.62:1224:v4':
+Hello World
+
+Log from '192.x.x.2:1224:v12':
+Hello World
+
+""", 'children':{
+      '[FILENAME]':{
+        'name':'filename', 'callback':command_callbacks.run_localfn, 'example':'[arg1, arg2, ...]',
+        'summary': 'Uploads the file to the vessels and starts running them, passing arguments if specified.',
+        'help_text':'','children':{
+          '[ARGUMENT]':{'name':'args', 'callback':command_callbacks.run_localfn_arg, 'help_text':'', 'children':{}},
+      }},
+  }},
+
+
+  'runv2':{
+    'name':'run', 'callback':None, 'example':'file [args ...]',
+    'summary':'Upload a file and start executing it as repyV2', 'help_text':"""
+Uploads a program to a vessel and starts it running.   (This command is
+actually just a short-cut for the 'upload' and 'startv2' commands).
+The arguments listed will be passed to the command when it is started.
+
+Example:
+exampleuser@browsegood !> show log
+Log from '192.x.x.2:1224:v3':
+
+Log from '193.x.x.42:1224:v18':
+
+Log from '219.x.x.62:1224:v4':
+
+Log from '192.x.x.2:1224:v12':
+
+exampleuser@browsegood !> run example.1.1.repy
+exampleuser@browsegood !> show log
+Log from '192.x.x.2:1224:v3':
+Hello World
+
+Log from '193.x.x.42:1224:v18':
+Hello World
+
+Log from '219.x.x.62:1224:v4':
+Hello World
+
+Log from '192.x.x.2:1224:v12':
+Hello World
+
+""", 'children':{
+      '[FILENAME]':{
+        'name':'filename', 'callback':command_callbacks.run_localfn, 'example':'[arg1, arg2, ...]',
+        'summary': 'Uploads the file to the vessels and starts running them, passing arguments if specified.',
+        'help_text':'','children':{
+          '[ARGUMENT]':{'name':'args', 'callback':command_callbacks.run_localfn_arg, 'help_text':'', 'children':{}},
+      }},
+  }},
+
+
   'add':{
     'name':'add', 'callback':None, 'example': '[target] [to group]',
     'summary':'Adds a target (a vessel name or group) to a group', 'help_text':"""
@@ -1206,6 +1372,10 @@
 arguments.   This program must first be uploaded to the vessel (the 'run'
 command does this for the user).
 
+This command will make an educated guess as to what platform your
+program is written for (i.e. repyV1 or repyV2).  You can override this
+by using 'startv1' or 'startv2', respectively.
+
 Example:
 exampleuser@%1 !> upload example.1.1.repy
 exampleuser@%1 !> start example.1.1.repy
@@ -1219,7 +1389,95 @@
       }},
   }},
 
+  'startv1':{
+    'name':'start', 'callback':None, 'example':'file [args ...]',
+    'summary':"Start an experiment (doesn't upload) in repyV1", 'cmdgroup': 'extended', 'help_text':"""
+start programname [arg1 arg2 ...]
 
+Begins executing a file in the vessel named programname with the given
+arguments in repyv1.   This program must first be uploaded to the vessel
+(the 'run' command does this for the user).
+
+Example:
+exampleuser@%1 !> upload example.1.1.repy
+exampleuser@%1 !> start example.1.1.repy
+exampleuser@%1 !> show log
+Log from '192.x.x.2:1224:v3':
+Hello World
+
+""", 'children':{
+      '[FILENAME]':{'name':'filename', 'callback':command_callbacks.start_remotefn, 'help_text':'', 'children':{
+          '[ARGUMENT]':{'name':'args', 'callback':command_callbacks.start_remotefn_arg, 'help_text':'', 'children':{}},
+      }},
+  }},
+
+  'startv2':{
+    'name':'start', 'callback':None, 'example':'file [args ...]',
+    'summary':"Start an experiment (doesn't upload) in repyV2", 'cmdgroup': 'extended', 'help_text':"""
+start programname [arg1 arg2 ...]
+
+Begins executing a file in the vessel named programname with the given
+arguments in repyv2.   This program must first be uploaded to the vessel
+(the 'run' command does this for the user).
+
+Example:
+exampleuser@%1 !> upload example.1.1.repy
+exampleuser@%1 !> start example.1.1.repy
+exampleuser@%1 !> show log
+Log from '192.x.x.2:1224:v3':
+Hello World
+
+""", 'children':{
+      '[FILENAME]':{'name':'filename', 'callback':command_callbacks.start_remotefn, 'help_text':'', 'children':{
+          '[ARGUMENT]':{'name':'args', 'callback':command_callbacks.start_remotefn_arg, 'help_text':'', 'children':{}},
+      }},
+  }},
+
+  'startv1':{
+    'name':'start', 'callback':None, 'example':'file [args ...]',
+    'summary':"Start an experiment (doesn't upload) in repyV1", 'cmdgroup': 'extended', 'help_text':"""
+start programname [arg1 arg2 ...]
+
+Begins executing a file in the vessel named programname with the given
+arguments in repyv1.   This program must first be uploaded to the vessel
+(the 'run' command does this for the user).
+
+Example:
+exampleuser@%1 !> upload example.1.1.repy
+exampleuser@%1 !> start example.1.1.repy
+exampleuser@%1 !> show log
+Log from '192.x.x.2:1224:v3':
+Hello World
+
+""", 'children':{
+      '[FILENAME]':{'name':'filename', 'callback':command_callbacks.start_remotefn, 'help_text':'', 'children':{
+          '[ARGUMENT]':{'name':'args', 'callback':command_callbacks.start_remotefn_arg, 'help_text':'', 'children':{}},
+      }},
+  }},
+
+  'startv2':{
+    'name':'start', 'callback':None, 'example':'file [args ...]',
+    'summary':"Start an experiment (doesn't upload) in repyV2", 'cmdgroup': 'extended', 'help_text':"""
+start programname [arg1 arg2 ...]
+
+Begins executing a file in the vessel named programname with the given
+arguments in repyv2.   This program must first be uploaded to the vessel
+(the 'run' command does this for the user).
+
+Example:
+exampleuser@%1 !> upload example.1.1.repy
+exampleuser@%1 !> start example.1.1.repy
+exampleuser@%1 !> show log
+Log from '192.x.x.2:1224:v3':
+Hello World
+
+""", 'children':{
+      '[FILENAME]':{'name':'filename', 'callback':command_callbacks.start_remotefn, 'help_text':'', 'children':{
+          '[ARGUMENT]':{'name':'args', 'callback':command_callbacks.start_remotefn_arg, 'help_text':'', 'children':{}},
+      }},
+  }},
+
+
   'stop':{
     'name':'stop', 'callback':command_callbacks.stop,
     'summary':'Stop an experiment but leave the log / files', 'help_text':"""
Index: seash/tests/help_test_results.txt
===================================================================
--- seash/tests/help_test_results.txt	(revision 6908)
+++ seash/tests/help_test_results.txt	(working copy)
@@ -21,6 +21,8 @@
 remove [target] [from group] -- Removes a target from a group
 reset                        -- Reset the vessel (clear files / log and stop)
 run file [args ...]          -- Upload a file and start executing it
+runv1 file [args ...]        -- Upload a file and start executing it as repyV1
+runv2 file [args ...]        -- Upload a file and start executing it as repyV2
 set                          -- Changes the shell or vessels (see 'help set')
 show                         -- Displays the shell state (see 'help show')
 stop                         -- Stop an experiment but leave the log / files
@@ -49,6 +51,10 @@
                                   with the keyname
 split resourcefn               -- Split another vessel off (requires owner)
 start file [args ...]          -- Start an experiment (doesn't upload)
+startv1 file [args ...]        -- Start an experiment (doesn't upload) in 
+                                  repyV1
+startv2 file [args ...]        -- Start an experiment (doesn't upload) in 
+                                  repyV2
 update                         -- Update information about the vessels
 
 
Index: seash/command_callbacks.py
===================================================================
--- seash/command_callbacks.py	(revision 6908)
+++ seash/command_callbacks.py	(working copy)
@@ -82,6 +82,8 @@
 repyhelper.translate_and_import("serialize.repy") # used for loadstate and savestate
 
 
+# The versions of Seattle that we officially support.
+SUPPORTED_PROG_PLATFORMS = ["repyV1", "repyV2"]
 
 
 # set the target, then handle other operations
@@ -2108,6 +2110,13 @@
 
   command_key = input_dict.keys()[0]
 
+  # Iterates through the dictionary to retrieve the repy version to run
+  while input_dict[command_key]['name'] is not 'start':
+    input_dict = input_dict[command_key]['children']
+    command_key = input_dict.keys()[0]
+
+  command = command_key
+
   # Iterates through the dictionary to retrieve the user's filename
   while input_dict[command_key]['name'] is not 'filename':
     input_dict = input_dict[command_key]['children']
@@ -2115,6 +2124,9 @@
 
   argstring = ' '.join([command_key])
 
+  prog_platform = seash_helper.get_execution_platform(command,
+    command_key)
+
   if not environment_dict['currenttarget']:
     raise seash_exceptions.UserError("Must specify a target")
 
@@ -2122,7 +2134,9 @@
   faillist = []
   goodlist = []
 
-  retdict = seash_helper.contact_targets(seash_global_variables.targets[environment_dict['currenttarget']],seash_helper.start_target, argstring)
+  retdict = seash_helper.contact_targets(
+    seash_global_variables.targets[environment_dict['currenttarget']],
+    seash_helper.start_target, argstring, prog_platform)
 
   for longname in retdict:
     if retdict[longname][0]:
@@ -2147,6 +2161,13 @@
 
   command_key = input_dict.keys()[0]
 
+  # Iterates through the dictionary to retrieve the repy version to run
+  while input_dict[command_key]['name'] is not 'start':
+    input_dict = input_dict[command_key]['children']
+    command_key = input_dict.keys()[0]
+
+  command = command_key
+
   # Iterates through the dictionary to retrieve the user's filename
   while input_dict[command_key]['name'] is not 'filename':
     input_dict = input_dict[command_key]['children']
@@ -2163,6 +2184,9 @@
 
   argstring = ' '.join([filename] + [arguments])
 
+  prog_platform = seash_helper.get_execution_platform(command,
+    filename)
+
   if not environment_dict['currenttarget']:
     raise seash_exceptions.UserError("Must specify a target")
 
@@ -2170,7 +2194,9 @@
   faillist = []
   goodlist = []
 
-  retdict = seash_helper.contact_targets(seash_global_variables.targets[environment_dict['currenttarget']],seash_helper.start_target, argstring)
+  retdict = seash_helper.contact_targets(
+    seash_global_variables.targets[environment_dict['currenttarget']],
+    seash_helper.start_target, argstring, prog_platform)
 
   for longname in retdict:
     if retdict[longname][0]:
@@ -2225,6 +2251,13 @@
 
   command_key = input_dict.keys()[0]
 
+  # Iterates through the dictionary to retrieve the repy version to run
+  while input_dict[command_key]['name'] is not 'run':
+    input_dict = input_dict[command_key]['children']
+    command_key = input_dict.keys()[0]
+
+  command = command_key
+
   # Iterates through the dictionary to retrieve the user's filename
   while input_dict[command_key]['name'] is not 'filename':
      input_dict = input_dict[command_key]['children']
@@ -2239,6 +2272,8 @@
   if not environment_dict['currenttarget']:
     raise seash_exceptions.UserError("Must specify a target")
 
+  prog_platform = seash_helper.get_execution_platform(command,
+    onlyfilename)
 
   # read the local file...
   fileobj = open(fileandpath,"r")
@@ -2255,7 +2290,10 @@
   faillist = []
   goodlist = []
 
-  retdict = seash_helper.contact_targets(seash_global_variables.targets[environment_dict['currenttarget']],seash_helper.run_target,onlyfilename,filedata, argstring)
+  retdict = seash_helper.contact_targets(
+    seash_global_variables.targets[environment_dict['currenttarget']],
+    seash_helper.run_target, onlyfilename, filedata, argstring,
+    prog_platform)
 
   for longname in retdict:
     if retdict[longname][0]:
@@ -2284,6 +2322,13 @@
 
   command_key = input_dict.keys()[0]
 
+  # Iterates through the dictionary to retrieve the repy version to run
+  while input_dict[command_key]['name'] is not 'run':
+    input_dict = input_dict[command_key]['children']
+    command_key = input_dict.keys()[0]
+
+  command = command_key
+
   # Iterates through the dictionary to retrieve the user's filename
   while input_dict[command_key]['name'] is not 'filename':
     input_dict = input_dict[command_key]['children']
@@ -2302,6 +2347,8 @@
   if not environment_dict['currenttarget']:
     raise seash_exceptions.UserError("Must specify a target")
 
+  prog_platform = seash_helper.get_execution_platform(command,
+    onlyfilename)
 
   # read the local file...
   fileobj = open(fileandpath,"r")
@@ -2318,7 +2365,10 @@
   faillist = []
   goodlist = []
 
-  retdict = seash_helper.contact_targets(seash_global_variables.targets[environment_dict['currenttarget']],seash_helper.run_target,onlyfilename,filedata, argstring)
+  retdict = seash_helper.contact_targets(
+    seash_global_variables.targets[environment_dict['currenttarget']],
+    seash_helper.run_target, onlyfilename, filedata, argstring,
+    prog_platform)
 
   for longname in retdict:
     if retdict[longname][0]:
Index: seash/seash_helper.py
===================================================================
--- seash/seash_helper.py	(revision 6908)
+++ seash/seash_helper.py	(working copy)
@@ -536,15 +536,18 @@
 
 
 
-def start_target(longname, argstring):
+def start_target(longname, argstring, prog_platform):
 
   vesselname = seash_global_variables.vesselinfo[longname]['vesselname']
 
   try:
     # start the program
-    fastnmclient.nmclient_signedsay(seash_global_variables.vesselinfo[longname]['handle'], "StartVessel", vesselname, argstring)
+    fastnmclient.nmclient_signedsay(
+      seash_global_variables.vesselinfo[longname]['handle'],
+      "StartVesselEx", vesselname, prog_platform, argstring)
 
   except fastnmclient.NMClientException, e:
+    print str(e)
     return (False, str(e))
 
   else:
@@ -587,13 +590,15 @@
 
 
 
-def run_target(longname,filename,filedata, argstring):
+def run_target(longname,filename,filedata, argstring, prog_platform):
 
   vesselname = seash_global_variables.vesselinfo[longname]['vesselname']
 
   try:
     fastnmclient.nmclient_signedsay(seash_global_variables.vesselinfo[longname]['handle'], "AddFileToVessel", vesselname, filename, filedata)
-    fastnmclient.nmclient_signedsay(seash_global_variables.vesselinfo[longname]['handle'], "StartVessel", vesselname, argstring)
+    fastnmclient.nmclient_signedsay(
+      seash_global_variables.vesselinfo[longname]['handle'],
+      "StartVesselEx", vesselname, prog_platform, argstring)
 
   except fastnmclient.NMClientException, e:
     return (False, str(e))
@@ -840,9 +845,39 @@
     fastnmclient.nmclient_set_handle_info(thisvesselhandle,thisvesselhandledict)
 
 
+def get_execution_platform(command, filename):
+  """
+  <Purpose>
+    Returns the execution platform based on a best-guess approach using
+    the specified command, as well as the a file's extension.  The
+    command takes precedence over the file extension.  If the extension
+    is not recognized, then it will be assumed that it is repyV2.
 
+  <Arguments>
+    command: The command that should be parsed.
+    filename: The file whose repy version should be returned.
 
+  <Side Effects>
+    None
 
+  <Exceptions>
+    None
+
+  <Returns>
+    A string indicating which version of repy a program is in, based on
+    its file extension.  This will be either "v1" or "v2".
+  """
+  if command.endswith('v2'):
+    return 'repyV2'
+  elif command.endswith('v1'):
+    return 'repyV1'
+
+  if filename.endswith('.repy'):
+    return 'repyV1'
+  else:
+    return 'repyV2'
+
+
 def print_vessel_errors(retdict):
   """
   <Purpose>
@@ -897,6 +932,8 @@
     "file not found": {
       'error': "The specified file(s) could not be found.",
       'reason': "Please check the filename."},
+    "Node Manager error 'Programming language platform is not supported.'": {
+      'error': "Requested platform is not supported by the target vessel."},
     }
 
   # A dictionary mapping error identifiers to a list of vessels that share
Index: nodemanager/nmAPI.mix
===================================================================
--- nodemanager/nmAPI.mix	(revision 6908)
+++ nodemanager/nmAPI.mix	(working copy)
@@ -176,12 +176,33 @@
 allowedchars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.-_ "
 
 def startvessel(vesselname, argstring):
+  """
+  This is the old startvessel call that will become obsolete eventually.
+  startvessel now calls startvessel_ex using repyV1 as the programming
+  language.
+  """
+  return startvessel_ex(vesselname, 'repyV1', argstring)
+
+
+
+
+def startvessel_ex(vesselname, prog_platform, argstring):
+  
+  # Convert the programming platform to lowercase to make
+  # it case insensitive.
+  prog_platform = prog_platform.lower()
+
   if vesselname not in vesseldict:
     raise BadRequest, "No such vessel"
 
   if vesseldict[vesselname]['status'] == 'Started':
     raise BadRequest("Vessel has already been started")
 
+  # Only repyV1 is supported, until the repy_v2 branch merges with
+  # trunk.
+  if prog_platform not in ['repyv1']:
+    raise BadRequest("Programming language platform is not supported.")
+
   # remove any prior stop file so that we can start
   if os.path.exists(vesseldict[vesselname]['stopfilename']):
     os.remove(vesseldict[vesselname]['stopfilename'])
Index: nodemanager/nmrequesthandler.py
===================================================================
--- nodemanager/nmrequesthandler.py	(revision 6908)
+++ nodemanager/nmrequesthandler.py	(working copy)
@@ -161,6 +161,7 @@
   'GetVesselResources': (1, 'Public', nmAPI.getvesselresources), \
   'GetOffcutResources': (0, 'Public', nmAPI.getoffcutresources), \
   'StartVessel': (2, 'User', nmAPI.startvessel), \
+  'StartVesselEx': (3, 'User', nmAPI.startvessel_ex), \
   'StopVessel': (1, 'User', nmAPI.stopvessel), \
   'AddFileToVessel': (3, 'User', nmAPI.addfiletovessel), \
   'ListFilesInVessel': (1, 'User', nmAPI.listfilesinvessel), \
