Index: repy/repy_constants.py
===================================================================
--- repy/repy_constants.py	(revision 4971)
+++ repy/repy_constants.py	(working copy)
@@ -36,6 +36,9 @@
 CPU_POLLING_FREQ_WIN = .1 # Windows
 CPU_POLLING_FREQ_WINCE = .5 # Mobile devices are pretty slow
 
+#Disk Polling Frequency for different types of devices:
+DISK_POLLING_HDD = 3
+DISK_POLLING_CE = 10
 
 # These IP addresses are used to resolve our external IP address
 # We attempt to connect to these IP addresses, and then check our local IP
Index: repy/nonportable.py
===================================================================
--- repy/nonportable.py	(revision 4971)
+++ repy/nonportable.py	(working copy)
@@ -367,44 +367,48 @@
     threading.Thread.__init__(self,name="NannyThread")
 
   def run(self):
-    # Calculate how often disk should be checked
+    # disk_to_memory_ratio: The ratio of the disk polling time to memory polling time.
+    # memory_check_interval: How often the memory will be checked (seconds)
+    
     if ostype == "WindowsCE":
-      disk_interval = int(repy_constants.RESOURCE_POLLING_FREQ_WINCE / repy_constants.CPU_POLLING_FREQ_WINCE)
+      disk_to_memory_ratio = int(repy_constants.DISK_POLLING_CE / repy_constants.CPU_POLLING_FREQ_WINCE)
+      memory_check_interval = repy_constants.CPU_POLLING_FREQ_WINCE
     else:
-      disk_interval = int(repy_constants.RESOURCE_POLLING_FREQ_WIN / repy_constants.CPU_POLLING_FREQ_WIN)
-    current_interval = 0 # What cycle are we on  
+      disk_to_memory_ratio = int(repy_constants.DISK_POLLING_HDD / repy_constants.CPU_POLLING_FREQ_WIN)
+      memory_check_interval = repy_constants.CPU_POLLING_FREQ_WIN
+      
+    # Which cycle number we're on  
+    counter = 0
     
     # Elevate our priority, above normal is higher than the usercode, and is enough for disk/mem
     windows_api.set_current_thread_priority(windows_api.THREAD_PRIORITY_ABOVE_NORMAL)
     
     # need my pid to get a process handle...
     mypid = os.getpid()
-
+    
     # run forever (only exit if an error occurs)
     while True:
       try:
+        # Increment the interval counter
+        counter += 1
+        
         # Check memory use, get the WorkingSetSize or RSS
         memused = windows_api.process_memory_info(mypid)['WorkingSetSize']
-        
+
         if memused > nanny.get_resource_limit("memory"):
           # We will be killed by the other thread...
           raise Exception, "Memory use '"+str(memused)+"' over limit '"+str(nanny.get_resource_limit("memory"))+"'"
-        
-        # Increment the interval we are on
-        current_interval += 1
 
         # Check if we should check the disk
-        if (current_interval % disk_interval) == 0:
+        if (counter % disk_to_memory_ratio) == 0:
           # Check diskused
           diskused = compute_disk_use(repy_constants.REPY_CURRENT_DIR)
           if diskused > nanny.get_resource_limit("diskused"):
             raise Exception, "Disk use '"+str(diskused)+"' over limit '"+str(nanny.get_resource_limit("diskused"))+"'"
+        # Sleep until the next iteration of checking the memory
+        time.sleep(memory_check_interval)
+
         
-        if ostype == 'WindowsCE':
-          time.sleep(repy_constants.CPU_POLLING_FREQ_WINCE)
-        else:
-          time.sleep(repy_constants.CPU_POLLING_FREQ_WIN)
-        
       except windows_api.DeadProcess:
         #  Process may be dead, or die while checking memory use
         #  In any case, there is no reason to continue running, just exit
