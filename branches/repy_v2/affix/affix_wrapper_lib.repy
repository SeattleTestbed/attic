"""
<Program>
  affix_wrapper_lib.repy

<Author>
  Monzur Muhammad

<Purpose>
  The purpose of this library is to provide various 
  wrapper library that are used by the Affix framework.
"""  


DEBUG_MODE = False

class AffixSocketWrapper:
  """
  Wrapper base class for the any socket-like object. Any call to this wrapped
  object will be directed to the corresponding public method defined in the
  affix. Not to be used directly.

  """
  def __init__(self, socket, affix_object):

    # We are always wrapping around the original socket-like object provided by
    # repy.
    self._socket = socket

    # We keep a reference to the caller affix so that we can invoke its internal
    # methods.
    self._affix_object = affix_object


  def __str__(self):
    return '(%s, affix: %s, socket: %s)' % (repr(self).replace(' instance at', ''), self._affix_object, self._socket)





class AffixUDPServerSocket(AffixSocketWrapper):
  """ Wraps around UDPServerSocket. """
  def __init__(self, socket, affix_object):
    """
    Initialize the AffixUDPServerSocket withe the passed in arguments.
    If the affix_object is already of type AffixUDPServerSocket, then
    we must extract the real socket from it before wrapping it up.
    """
    if isinstance(socket, AffixUDPServerSocket):
      real_socket = socket._socket
    else:
      real_socket = socket
    AffixSocketWrapper.__init__(self, real_socket, affix_object) 

  def getmessage(self):
    return self._affix_object.udpserversocket_getmessage(self._socket)

  def close(self):
    return self._affix_object.udpserversocket_close(self._socket)





class AffixTCPServerSocket(AffixSocketWrapper):
  """ Wraps around TCPServerSocket. """
  def __init__(self, socket, affix_object):
    """
    Initialize the AffixTCPServerSocket withe the passed in arguments.
    If the affix_object is already of type AffixTCPServerSocket, then
    we must extract the real socket from it before wrapping it up.
    """
    if isinstance(socket, AffixTCPServerSocket):
      real_socket = socket._socket
    else:
      real_socket = socket
    AffixSocketWrapper.__init__(self, real_socket, affix_object)

  def getconnection(self):
    return self._affix_object.tcpserversocket_getconnection(self._socket)

  def close(self):
    return self._affix_object.tcpserversocket_close(self._socket)





class AffixSocket(AffixSocketWrapper):
  """ Wraps around the repy socket object. """
  def __init__(self, socket, affix_object):
    """
    Initialize the AffixSocket withe the passed in arguments.
    If the affix_object is already of type AffixSocket, then
    we must extract the real socket from it before wrapping it up.
    """
    if isinstance(socket, AffixSocket):
      real_socket = socket._socket
    else:
      real_socket = socket
    AffixSocketWrapper.__init__(self, real_socket, affix_object)

  def close(self):
    return self._affix_object.socket_close(self._socket)

  def recv(self, bytes):
    return self._affix_object.socket_recv(self._socket, bytes)

  def send(self, message):
    return self._affix_object.socket_send(self._socket, message)




# The RepyNetworkApiWrapper is a class that is used to wrap
# around the entire Repy networkk API such that the AFFIX 
# stack can escape and make the actual network call

class RepyNetworkApiWrapper:
  """
  <Purpose>
    Create an object that has all the original repy network
    call definitions. We escape the affix stack and call on
    the actual repy network api.
  """

  def __init__(self):
    """
    Empty constructor.
    """
    pass


  def gethostbyname(self, name):
    """
    The original repy gethostbyname call.
    """
    return gethostbyname(name)


  def getmyip(self):
    """
    The original repy getmyip call.
    """
    return getmyip()




  def sendmessage(self, destip, destport, message, localip, localport):
    """
    The original repy sendmessage call.
    """
    # The destip can be a zenodotus name. We need to translate it to IP, because
    # openconnection requires the destination IP address.
    try:
      destip = gethostbyname(destip)
    except NetworkAddressError:
      raise AddressBindingError('Unable to resolve ' + destip)

    try:
      localip = gethostbyname(localip)
    except NetworkAddressError:
      raise AddressBindingError('Unable to resolve ' + destip)

    return sendmessage(destip, destport, message, localip, localport)


  def listenformessage(self, localip, localport):
    """
    The original repy listenformessage call.
    """
    try:
      localip = gethostbyname(localip)
    except NetworkAddressError:
      raise AddressBindingError('Unable to resolve ' + localip)
    return listenformessage(localip, localport)


  def openconnection(self, destip, destport, localip, localport, timeout):
    """
    The original repy openconnection call.
    """
    # The destip can be a zenodotus name. We need to translate it to IP, because
    # openconnection requires the destination IP address.
    try:
      destip = gethostbyname(destip)
    except NetworkAddressError:
      raise ConnectionRefusedError('Unable to resolve ' + destip)

    try:
      localip = gethostbyname(localip)
    except NetworkAddressError:
      raise AddressBindingError('Unable to resolve ' + destip)


    if DEBUG_MODE:
      log("[Netcall:openconnection] Destip: %s, Destport: %d, Localip: %s," % (destip, destport, localip) + 
          " Localport: %d, Timeout: %s\n" % (localport, str(timeout)))

    return openconnection(destip, destport, localip, localport, timeout)


  def listenforconnection(self, localip, localport):
    """
    The original repy listenforconnection call.
    """
    try:
      localip = gethostbyname(localip)
    except NetworkAddressError:
      raise AddressBindingError('Unable to resolve ' + localip)

    if DEBUG_MODE:
      log("[Netcall:listenforconnection] Localip: %s, Localport: %d\n" % (localip, localport))

    return listenforconnection(localip, localport)


  def socket_close(self, socket):
    """
    The close() call on the original socket object.
    """
    return socket.close()



  def socket_send(self, socket, msg):
    """
    Send message by calling send() on the original socket.
    """
    if DEBUG_MODE:
      log("[Netcall:socket.send] Socket: %s, Msg: %s\n" % (str(socket), msg))
    return socket.send(msg)



  def socket_recv(self, socket, bytes):
    """
    Receive message from the original socket.
    """
    return_msg = socket.recv(bytes)

    if DEBUG_MODE:
      log("[Netcall:socket.recv] Socket: %s, Msg: %s\n" % (str(socket), return_msg))

    return return_msg




  def tcpserversocket_getconnection(self, tcpserversocket):
    """
    Call getconnection() on the original repy tcpserversocket.
    """

    rip, rport, sockobj = tcpserversocket.getconnection()

    if DEBUG_MODE:
      log("[Netcall:tcpserver.getconnection] Socket: %s, Remoteip: %s, Remoteport: %d" % (str(socket), remoteip, remoteport))

    return rip, rport, sockobj



  def tcpserversocket_close(self, tcpserversocket):
    """
    Close the original tcpserversocket.
    """
    return tcpserversocket.close()



  def udpserversocket_getmessage(self, udpserversocket):
    """
    Call the getmessage() call on the original udpserversocket.
    """
    return udpserversocket.getmessage()



  def udpserversocket_close(self, udpserversocket):
    """
    Close the original udpserversocket.
    """
    return udpserversocket.close()


  def get_advertisement_string(self):
    """
    Returns the string used for advertisement of this affix.
	"""
    return ''

  
  def __str__(self):
    return '(%s)' % repr(self).replace(' instance at', '')





