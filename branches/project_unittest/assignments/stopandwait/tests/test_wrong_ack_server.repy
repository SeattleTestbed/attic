"""
  This program runs as a server that receives multiple messages sent via reliable_sendmess
  calls from a client.   It checks for good behavior from reliable_sendmess by sending a wrong ack 
  back (eg the client is waiting for 0 and the server sends a 1 ack back). reliable_sendmess should keep 
  resending the data and the server should keep getting the duplicates of the same message.
  
  This program must be started before the client program is started.


  Arguments needed:
	myport - the local port number to listen on

"""




def process_mess(remoteip, remoteport, packet, commhandle):





  header = packet[0]
  delim = packet[1]
  message = packet[2:]
  ack = packet[:2]

  # make ack w/ wrong header the first time
  if mycontext['packet_num'] == 1 :
    new_header = -1

    if header == 0:
      new_header = 1

    elif header == 1 :
      new_header == 0

    else:
      print 'Test failed.  The header was not a 0 or a 1.'
      return

    ack = str(new_header) + str(delim)

  #send ack
  try:

    print 'sending ack '+ str(mycontext['packet_num'])
    sendmess(remoteip, mycontext['myport'], str(ack))

  except Exception, e:
    print 'test indeterminate:  error while sending ack.\n The error is:  ' + str(e)
    return

  # update count
  mycontext['packet_num'] = mycontext['packet_num'] + 1




if callfunc == 'initialize':

  # Port number of the client computer
  mycontext['myport'] = int(callargs[0])
  mycontext['packet_num'] = 1

  #receive the message with a normal recvmess and process it with process_mess
  recvmess(getmyip(), mycontext['myport'], process_mess)