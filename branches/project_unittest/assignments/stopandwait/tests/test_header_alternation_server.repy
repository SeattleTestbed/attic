"""
  This program runs as a server that receives multiple messages 
  from a client and processes them to determine that the header information 
  is correctly formatted and that it alternates between messages.
  
  It sends acks back to the client program and prints the messages received.  
  It prints error messages if any occur or if the header doesn't alternate.
  
  This program must be started before the client program is started.


  Arguments needed:
	myport - the local port number to listen on

"""



def process_mess(remoteip, remoteport, packet, commhandle):


  """
  <Purpose>
	Checks whether the headers alternate between consecutive messages.
	It prints the packets and their contents as they are received.
	If the headers don't alternate or other errors occur, it prints them.
  <Arguments>
	remoteip - ip address of the client
	remoteport - port number of the client
	packet - string that has the header and message contents received
	commhandle - handle to the client, not used here

  <Exceptions>
	None.

  <Side Effects>
	None.

  <Returns>
	Nothing.

  """

  #the packet isn't long enough to contain the header, delimiter, and a message 
  if len(packet) < 3 :
    print 'Test failed:  the packet is malformed.'
    return
  
  header = packet[0]
  delim = packet[1]
  message = packet[2:]


  if mycontext['prev_mess'] == message && mycontext['prev_header'] == header:

    #this is a repeated packet so just send an ack and don't update anything
    ack = packet[:2]
    try:
      sendmess(remoteip, mycontext['myport'], str(ack))
      print 'Received repeat of packet '+str(mycontext['packet_num'])+'\n'
    except Exception, e:
      print 'test indeterminate:  error while sending ack.\n The error is:  ' + str(e)+'\n'
      return

  elif mycontext['prev_mess'] == message :

    #it's a repeated message but the header changed when it shouldn't
    print 'Test failed: the header changes for repeated sends of the same packet.\n'
    print 'For packet ' + str(mycontext['packet_num']) + ' the previous header was '+ str(mycontext['prev_header']) + ' and the current header is '+str(header)+'\n'
    
  elif mycontext['prev_header'] == header :

    #it's a different packet but it still has the same header as the previous packet when the header should have been changed
    print 'Test failed:  the header does not alternate between sequential packets.\n'
 
  else:

    #it's a new packet so update everything
    mycontext['prev_header'] = header
    mycontext['prev_mess'] = message 
    mycontext['packet_num'] = mycontext['packet_num'] + 1
    print 'Received packet ' + str(mycontext['packet_num']) + ':  '+ str(packet)+'\n'

    #send the ack to the client
    ack = packet[:2]
    try:
      sendmess(remoteip, mycontext['myport'], str(ack))
      print 'Received packet '+str(mycontext['packet_num'])+'\n'
    except Exception, e:
      print 'test indeterminate:  error while sending ack.\n The error is:  ' + str(e)+'\n'
      return






    
if callfunc == 'initialize':

  # Port number of the client computer
  mycontext['myport'] = int(callargs[0])

  #set up variables for the number of packets received and the header of the previous packet
  mycontext['packet_num'] = 0
  mycontext['prev_header'] = -1
  mycontext['prev_mess'] = 'no previous packet'

  recvmess(getmyip(), mycontext['myport'], process_mess)

