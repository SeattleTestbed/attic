def grade(test_log_string):

  """
  <Purpose>
    Grades log output produced from running the test
  <Arguments>
    test_log_string:  string output from running the test
  <Exceptions>
     None.
  <Side Effects>
     None.
  <Returns>
     Returns a string stating that the test either passed or failed.
  """

  if(test_log_string.find('test completed') != -1):
    return 'SUCCESS'
  else:
    return 'FAILURE'



def test_multiple_requests_per_connection():
  """
  <Purpose>
    Test to see if the server closes a client connection after the first send/recv transaction.
  <Arguments>
    None.
  <Exceptions>
    None.
  <Side Effects>
    None.
  <Returns>
    Returns a string that either states the test passed or provides an error message.

  """
  try:
    conn = openconn(mycontext['host'], mycontext['port'])
    msg = 'GET / HTTP/1.1\n'
    conn.send(msg)
    conn.recv(10000)
  except Exception, e:
    # server didn't work for first connection
    return 'test indeterminant:  the first client transaction did not work and had the following error:    ' + str(e)
  try:
    conn.send(msg)
    conn.recv(msg)
  except Exception, e:
    #server closed after first transaction
    return 'test completed'
  else:
    conn.close()
    return 'test failed'




if callfunc == 'initialize':
  if len(callargs) != 2:
    raise Exception("Wrong number of  call args.  This program takes two arguements <server_ip> <port_number>")
  else:
    mycontext['host'] = callargs[0]
    mycontext['port'] = int(callargs[1])
    client_ip = getmyip()
 
    passed = test_multiple_requests_per_connection()
    print passed