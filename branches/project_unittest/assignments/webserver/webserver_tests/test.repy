def perform_test(msg, expected_response):
  """
  <Purpose>
    Perform a complete client transaction sending msg to the server and testing if the  expected_response was obtained.
  <Arguments>
    msg:  http request to send to the server
    expected_response:  expected first line of http response from the server
  <Exceptions>
    None.
  <Side Effects>
    None.
  <Returns>
    Returns a message indicating the test passed or an error.

  """
  try:
    conn = openconn(mycontext['host'], mycontext['port'])
    conn.send(msg)
  except Exception, e:
    return "test failed:    " + str(e)

  (passed, response) = recv_msg(conn, expected_response)
  if(passed == 'f'):
      return "test failed:   " + str(response)

  try:
    conn.close()
  except Exception, e:
    return "test failed:    " + str(e)

  return 'test passed'




def recv_msg(conn, expected_msg):
  """
  <Purpose>
     Receives a message from the server and checks if it is the same as the expected message.
  <Arguments>
     conn:  connection to the server
     expected_msg:  first line of http response that was expected
  <Exceptions>
     None.
  <Side Effects>
     Closes the connection if a message is not received within the timeout range.
  <Returns>
    Returns a pair (passed, message).
    passed:  p if the first line of the server response was the same as expected
             f if there was an exception or the first line was different
    message:  returns the error message, the message from the server if it was different, or the first_line of the http response if it was correct


  """
  time_out = settimer(5.0, close_conn, [conn])
  try:
    data = conn.recv(1024)
    canceltimer(time_out)

    lines = data.split('\n')
    first_line = lines[0].replace("\r","")
    if (first_line == expected_msg):
      return ('p', expected_msg)
    else:
      return ('f', "Server response was different than expected.\nExpected first line:  "+expected_msg+"\nReceived message:  "+ data)
  except Exception, e:
    return ('f', e)
