"""

<Program Name>

  reliable_client.repy



<Started>

  January 8, 2009



<Author>

  MikeMosh@cs.washington.edu

  Michael Moshofsky



<Purpose>

  Reads data from a file and sends it to a server program in a reliable way.

  The server program (reliable_server.repy) must be running before this program

  starts.



  The user can specify the time before packets are resent and
 also the number 
  of retries per packet. 



"""


include reliable.repy





"""

  Reads the data from the file given and seperates the data into packets.

  Calls reliable_sendmess to send each packet.



  fileName - name of file to read from.

  serverip - ip address of the server computer.

  maxdgramsize - size in bytes of the message of each packet.

  nretries - number of times sendmess will retry sending each packet.

  timeoutms - number of miliseconds to wait for a ack before resending the packet.


"""
def main(fileName, serverip, maxdgramsize, nretries, timeoutms):

  reliable_config(nretries, timeoutms)

  data = ""
  # will be a string with all the data from the file.

  filedata = open(fileName,"r")
  # Reading all the data from the file and putting it into a string.
  for line in filedata:
    data += line
  filedata.close()
  # Data will be sent until the string is empty.
  # After data is sent, it will be erased from the string.
  while len(data) > 1: # " " at the end that we don't want to send
    ncharsinpacket = 0
    datapacket = ""
    while ncharsinpacket < (maxdgramsize):
      # If there is no data left, it will send what it has so far.
      if len(data) == 0:
        break
      datapacket += data[0]
      ncharsinpacket += 1
      # Delete data just added to packet from string.
      data = data[1:]

    # sending the current data packet.
    # testing line: print "packet " + datapacket
    reliable_sendmess(serverip, mycontext['port'], datapacket)
  exitall()








"""

  Sends a file of data to the server computer in a reliable way.

  The server program must be started before this program is started.

  If the number of retries is not specified 4 will be used.

  If the time to wait for packets is not specified, 10 will be used.



  Arguments needed: filename serverip port maxdgramsize nretries timeoutms



"""
if callfunc == 'initialize':
  fileName = callargs[0]
  serverip = callargs[1]
  mycontext['port'] = int(callargs[2])
  maxdgramsize = int(callargs[3])
  nretries = int(callargs[4])
  timeoutms = int(callargs[5])
  main(fileName, serverip, maxdgramsize, nretries, timeoutms)
