include reliable.repy

def usage(argc):
    print "Usage: reliable_client.repy inputfile desthost destportnum [srchost srcportnum [maxdgramsize nretries timeoutms]]\n"
    raise Exception("wrong number of callargs: " + str(argc))

if callfunc == 'initialize':
  argc = len(callargs)
  if argc < 3 or argc > 8:
    usage(argc)

  # Read in the call args
  fileobj = open(callargs.pop(0), "r")
  message = fileobj.read()
  fileobj.close()

  # allow (file, ip, port)
  desthost = callargs.pop(0)
  destport = int(callargs.pop(0))

  # allow (file, ip, port, srcip, srcport)
  if callargs:  
    srchost = callargs.pop(0)
    srcport = int(callargs.pop(0))
  else:
    srchost = None
    srcport = None

  # allow (..., maxdgramsize, nretries, timeoutinms)
  # Configure the protocol
  if callargs:
    maxdgramsize = int(callargs.pop(0))
    nretries = int(callargs.pop(0))
    timeoutms = int(callargs.pop(0))
    reliable_config(maxdgramsize, nretries, timeoutms)

  print "Client: Sending " + str(message) + " from " + str(srchost) + ":" + str(srcport) + " to " + str(desthost) + ":" + str(destport)

  # Send it
  reliable_sendmess(desthost, destport, message, srchost, srcport)

  print "Client: Finished sending"
  exitall()
