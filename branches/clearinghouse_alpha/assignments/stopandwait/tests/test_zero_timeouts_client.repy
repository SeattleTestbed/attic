"""
  This program runs as a client that sends a message 
  to a server using the reliable_sendmess function from 
  the reliable library.  This client tests the library for 
  user-defined configurations.  It checks  0 timeoutinms for
  no retransmits, no TimeoutError, and no time delay before 
  returning from reliable_sendmess.
  
  It prints an affirmative message if everything went correctly.  
  Otherwise it prints the error that occurred.
  
  This program must be started after the server program is started.


  Arguments needed:
	serverip - the dot-decimal notation ip address of the server
	port - the port number of the server computer

"""



include reliable.repy




if callfunc == 'initialize':

  if len(callargs) != 2 :
    print 'Wrong number of call args used.  The test could not be run.'
    return

  #set ip address and port number of the server
  serverip = callargs[0]
  port = int(callargs[1])

  #make message to send
  packet1 = 'pack 1'
  
 
  try:

    #set configurations
    max_dgram_size = 30
    max_retries = 0
    max_timeout = 0
    reliable_config(max_dgram_size, max_retries, max_timeout)

    #get time when you call sendmess function
    start_time = getruntime()
    print 'Start time: '+str(start_time)

    #send the message using the function from the library
    reliable_sendmess(serverip, port, packet1)

    #get the time when reliable_sendmess returns
    end_time = getruntime()
    print 'Time after reliable_sendmess returns: '+str(end_time)
 
  except TimeoutError, e:

    print 'Test failed.  A timeout error was thrown.'
    return
  
  #get the time it took for the reliable_sendmess call to execute
  diff_time = 1000*(end_time - start_time)
  print 'Time taken for the method in ms: '+str(diff_time)
  

  # reliable_sendmess should immediately return and not wait the timeout
  # gave the program leeway for executing the function and then getting the time 
  if (int)diff_time >= 2 :
    print 'Test failed.  reliable_sendmess waited before returning.'
    return

  print 'test completed'