"""
  This program runs as a server that receives a message sent via reliable_sendmess
  from a client and checks that the default configurations work.  It does this by not sending
  back ack messages and checking the number of times and time intervals the message is resent. 
  
  It prints error messages if any occur or if the time intervals were off or if the number of retries was wrong.
  
  This program must be started before the client program is started.


  Arguments needed:
	myport - the local port number to listen on

"""


def process_mess(remoteip, remoteport, packet, commhandle):


  """
  <Purpose>
	Tests the default configurations for the reliable_sendmess used on the client side 
	and prints error messages if there are problems/the defualts don't work.
	The default configs are: "retransmit 4 times with a timeout of 10 milliseconds".

  <Arguments>
	remoteip - ip address of the client
	remoteport - port number of the client
	packet - string that has the header and message contents received
	commhandle - handle to the client, not used here

  <Exceptions>
	None.

  <Side Effects>
	None.

  <Returns>
	Nothing.
  """


  time = getruntime()

  if mycontext['num_recv] == 0 :

    #first time the packet is received
    mycontext['prev_time'] = time
    mycontext['num_recv'] = 1
    print 'Recieved packet 1 at time'+str(time)+'\n'

  else:
    diff = 1000 * (time - mycontext['prev_time'])

    if (int)diff != 10 :
      # timeout between messages isn't right
      print 'Test failed.  The timeout before resending the message is wrong.  It should have been 10 ms but was '+ str(diff) + 'ms\n'
    else:
      # got the packet after the proper timeout
      mycontext['prev_time'] = time
      mycontext['num_recv'] = mycontext['num_recv'] + 1
      print 'Recieved packet '+str(mycontext['num_recv'])+' at time '+str(time)+'\n'
     






if callfunc == 'initialize':

  # local port number to listen on
  mycontext['myport'] = int(callargs[0])

  #num_recv is the number of received messages
  mycontext['num_recv'] = 0

  #prev_time is the time when the last message was received
  mycontext['prev_time'] = -1

  #receive the message with a normal recvmess and process it with process_mess
  recvmess(getmyip(), mycontext['myport'], process_mess)