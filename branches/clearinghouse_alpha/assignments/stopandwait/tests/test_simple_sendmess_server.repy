"""
  This program runs as a server that receives a single expected message 
  from a client and processes it to determine that the header information 
  is correctly formatted and that the entire message was received.
  
  It sends an ack back to the client program and prints an affirmative
  message if everything went correctly.  Otherwise it prints the error 
  that occurred.
  
  This program must be started before the client program is started.


  Arguments needed:
	myport - the local port number to listen on


"""



def process_mess(remoteip, remoteport, packet, commhandle):

  """
  <Purpose>
	Receives a message from a client, checks that it contains the proper header and was the expected message, and sends an ack back.

  <Arguments>
	remoteip:  ip address in dot-decimal notation of the client computer
	remoteport:  port number of the client computer
	packet: string containing the received message and header
	commhandle: handle to the connection with the client but isn't used in this function

  <Exceptions>
	None.
  <Side Effects>
	None.
  <Returns>
	Returns a string stating whether the test was completed or what error occurred.
  """


  print 'Packet received:  '+str(packet)

  #check if the packet is too short to contain the header, delimiter, and message
  if len(packet) < 2 :
    print 'test failed:  packet improperly formed.\n The packet received was:  '+ str(packet)
    return

  #check if the header is a 0 or 1
  header = packet[0]
  if header != 0 && header != 1 :
    print 'test failed:  improper header.\n The header was:  '+str(header)
    return
  
  #check that the message matches one sent
  message = packet[2:]
  if message != 'Testing stop_and_wait reliable_sendmess'
    print 'test failed:  message received does not match the message sent.\n The message received was:  '+ str(message)
    return

  #made it through everything and the packet was good so send an ack back
  ack = packet[:2]
  try:
    sendmess(remoteip, mycontext['myport'], str(ack))
  except Exception, e:
    print 'test indeterminate:  error while sending ack.\n The error is:  ' + str(e)
    return
  print 'test completed'







if callfunc == 'initialize':

  # get the local port number to listen on from the command-line arguments
  mycontext['myport'] = int(callargs[0])

  #receive the message with a normal recvmess and process it with process_mess
  recvmess(getmyip(), mycontext['myport'], process_mess)