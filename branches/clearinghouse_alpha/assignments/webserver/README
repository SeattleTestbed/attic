webserver assignment
Jenn Hanson
January 2009




<Description>
  This is an implementation of the Seattle's webserver assignment ( https://seattle.cs.washington.edu/wiki/WebServerAssignment ).
  The server processes HTTP request concurently from multiple clients.
  If a client does not send a request within 5 seconds of connecting, the server closes the connection to this client.
  It runs on Firefox.

  It returns a valid HTTP response with one of the following:
  - listing of files in the current directory
  - the contents of a specific html or text file in the current directory
  - file not found error message if the request was valid but the file did not exist within the current directory
  - bad request message if the HTTP request was not properly formed

  The test programs checks:
  - valid 200, 400, and 404 responses
  - server timeouts where a 'slow' client does not send a request within 5 seconds of connecting the server
  - server closes each client connection after one request
  - the total time needed to make 100 client 'transactions' 


  test_client_timeout.repy:  
      tests whether the server will timeout the connection for a "slow" client 
      that does not respond within 5 seconds

  test_file_not_found.repy:  
      tests whether the server will send the appropriate file not found response 
      to a request for some bogus filename that was formed via randomfloat

  test_invalid_request.repy:  
      tests whether the server will send a 400 bad request response to a malformed http request

  test_multiple_connections.repy:  
      tests 100 client transactions and reports the total and average time per request
 
  test_multiple_requests_per_conn.repy:  
      test whether the server will close a client connection after the first recv-send transaction
  
  test_valid_request.repy:  
      tests whether the server will respond with a 200 Ok response to a valid http request.





<Running  webserver.repy>
  The program  has an optional command line arguement to specify the server port number
  to which clients can connect from a list of the following ports:  12345, 22222, 33333, 44444.  
  If no port number is specified it will run on port 12345.

  To run the server locally type:  

  $  python repy.py webserver_restrictions.test webserver.repy <port_number> 
  To kill the server just type CTRL-C
  
  To run the server remotely type:
  $ run webserver.repy <port_number>
 




<Running tests>
  The test programs takes 2 command line arguements that specify the ip address of the server and
  the port number for connecting to it.

  To run the test locally type: 
  $  python repy.py webserver_restrictions.test <test_program> <server_ip> <port_number>  

  To run the test remotely type:
  $ run <test_program> <server_ip> <port_number>
  

<Using the server>
  Open Firefox and type the following into the command line:
  <ip_address> must be in dot-decimal notation (e.g. 111.222.333.444)

  -To see a listing of files in the current directory:
  http://<ip_address>:<port_number>/

  -To see the contents of a specific basic html or text file in the current directory:
  http://<ip_address>:<port_number>/<file_name>

